local obf_cached_str = {};
local obf_stringchar = string.char;
local obf_stringbyte = string.byte;
local obf_stringsub = string.sub;
local obf_bitlib = bit32 or bit;
local obf_XOR = obf_bitlib.bxor;
local obf_tableconcat = table.concat;
local obf_tableinsert = table.insert;
local function LUAOBFUSACTOR_DECRYPT_STR_0(LUAOBFUSACTOR_STR, LUAOBFUSACTOR_KEY)
	local result = {};
	for i = 1, #LUAOBFUSACTOR_STR do
		obf_tableinsert(result, obf_stringchar(obf_XOR(obf_stringbyte(obf_stringsub(LUAOBFUSACTOR_STR, i, i + 1)), obf_stringbyte(obf_stringsub(LUAOBFUSACTOR_KEY, 1 + (i % #LUAOBFUSACTOR_KEY), 1 + (i % #LUAOBFUSACTOR_KEY) + 1))) % 256));
	end
	return obf_tableconcat(result);
end
obf_cached_str[850] = LUAOBFUSACTOR_DECRYPT_STR_0("\223\78\206\72\201\212\73\198\94\128\158", "\231\176\44\164\43");
obf_cached_str[849] = LUAOBFUSACTOR_DECRYPT_STR_0("\199\60\86\27\94\95\195\145", "\230\226\17\103\43\45\127");
obf_cached_str[848] = LUAOBFUSACTOR_DECRYPT_STR_0("\26\33\33\78\227", "\140\126\68\67\59\132\221");
obf_cached_str[847] = LUAOBFUSACTOR_DECRYPT_STR_0("\142\180\68\13\94", "\112\225\214\46\110");
obf_cached_str[846] = LUAOBFUSACTOR_DECRYPT_STR_0("\0\104\24\158\86\101\12\221", "\174\37\69\41");
obf_cached_str[845] = LUAOBFUSACTOR_DECRYPT_STR_0("\29\232\8\70\48\236\113\45\214\13", "\29\66\183\105\51\68\131");
obf_cached_str[844] = LUAOBFUSACTOR_DECRYPT_STR_0("\215\189\37\23\77\27\239", "\57\136\226\76\121\41\126\151");
obf_cached_str[843] = LUAOBFUSACTOR_DECRYPT_STR_0("\92\224\214\26\69\87\235\207\9\123\71\225\212", "\26\51\130\188\121");
obf_cached_str[842] = LUAOBFUSACTOR_DECRYPT_STR_0("\94\15\79\10\228\179\214\82", "\181\58\102\60\122\133\199");
obf_cached_str[841] = LUAOBFUSACTOR_DECRYPT_STR_0("\70\40\177\34\37\233\22\90\58\190\34\14", "\120\41\74\219\65\122\128");
obf_cached_str[840] = LUAOBFUSACTOR_DECRYPT_STR_0("\255\204\196\98\84\245\214", "\49\150\162\183\18");
obf_cached_str[839] = LUAOBFUSACTOR_DECRYPT_STR_0("\167\244\166\70\17\208", "\206\206\132\199\47\99\163");
obf_cached_str[838] = LUAOBFUSACTOR_DECRYPT_STR_0("\0\161\57\13", "\68\110\209\77\127\113\102\59");
obf_cached_str[837] = LUAOBFUSACTOR_DECRYPT_STR_0("\235\47\49\23\254", "\98\159\64\93");
obf_cached_str[836] = LUAOBFUSACTOR_DECRYPT_STR_0("\218\14\76\194\168", "\194\174\97\35\160");
obf_cached_str[835] = LUAOBFUSACTOR_DECRYPT_STR_0("\173\16\229\206\14", "\39\207\124\138\173\101");
obf_cached_str[834] = LUAOBFUSACTOR_DECRYPT_STR_0("\176\43\137\228\79\5\169\255\161", "\154\211\74\229\136\60\112\217");
obf_cached_str[832] = LUAOBFUSACTOR_DECRYPT_STR_0("\98\59\174\230\107\11\116", "\103\17\76\199\156\17");
obf_cached_str[831] = LUAOBFUSACTOR_DECRYPT_STR_0("\114\65\91\50\118\81\87\48\119", "\95\19\37\63");
obf_cached_str[830] = LUAOBFUSACTOR_DECRYPT_STR_0("\170\104\115\253\60\67\161\123", "\42\197\30\22\143\78");
obf_cached_str[829] = LUAOBFUSACTOR_DECRYPT_STR_0("\6\38\167\92\21", "\46\114\73\198");
obf_cached_str[828] = LUAOBFUSACTOR_DECRYPT_STR_0("\54\226\35\253\31\93\207", "\162\85\141\77\155\112\47");
obf_cached_str[827] = LUAOBFUSACTOR_DECRYPT_STR_0("\213\30\194\172", "\154\188\104\163\222\62");
obf_cached_str[826] = LUAOBFUSACTOR_DECRYPT_STR_0("\182\178\228\162\158", "\237\223\196\133\208");
obf_cached_str[825] = LUAOBFUSACTOR_DECRYPT_STR_0("\108\62\251\10\113\53\236\9", "\122\30\91\136");
obf_cached_str[824] = LUAOBFUSACTOR_DECRYPT_STR_0("\122\192\182\161\248\185", "\150\23\165\194\201\151\221\77");
obf_cached_str[823] = LUAOBFUSACTOR_DECRYPT_STR_0("\123\112\152\33\26\119\101", "\19\22\21\236\73\117");
obf_cached_str[822] = LUAOBFUSACTOR_DECRYPT_STR_0("\237\235\248\240\248\235\227\249", "\128\157\153\151");
obf_cached_str[821] = LUAOBFUSACTOR_DECRYPT_STR_0("\90\108\206\84\127\87\65\67\123\210", "\53\42\30\161\36\26\37");
obf_cached_str[820] = LUAOBFUSACTOR_DECRYPT_STR_0("\40\186\184\126\253\57\184\165", "\146\75\213\214\24");
obf_cached_str[819] = LUAOBFUSACTOR_DECRYPT_STR_0("\177\32\235", "\227\216\83\138\198\82\165");
obf_cached_str[818] = LUAOBFUSACTOR_DECRYPT_STR_0("\84\128\10\179\90\137\31\161\74", "\210\57\229\126");
obf_cached_str[817] = LUAOBFUSACTOR_DECRYPT_STR_0("\198\150\51\244\169\86\198\212\144\48", "\170\181\227\67\145\219\53");
obf_cached_str[816] = LUAOBFUSACTOR_DECRYPT_STR_0("\188\132\63\209\170\251\234\178\141", "\139\223\232\94\162\217\149");
obf_cached_str[815] = LUAOBFUSACTOR_DECRYPT_STR_0("\84\44\133\171\68", "\216\55\64\228");
obf_cached_str[814] = LUAOBFUSACTOR_DECRYPT_STR_0("\46\224\160\94\15\89\179\43\242\190\72", "\208\71\147\205\59\123\56");
obf_cached_str[813] = LUAOBFUSACTOR_DECRYPT_STR_0("\60\99\240\15\63", "\109\85\16\159");
obf_cached_str[812] = LUAOBFUSACTOR_DECRYPT_STR_0("\20\1\75\160\193\56\85", "\108\125\114\40\204\160\75\38");
obf_cached_str[811] = LUAOBFUSACTOR_DECRYPT_STR_0("\13\169\80\164\25\113\206", "\48\110\197\49\215\106\20\189");
obf_cached_str[810] = LUAOBFUSACTOR_DECRYPT_STR_0("\64\35\16\56\95\50\16\32", "\76\48\81\127");
obf_cached_str[809] = LUAOBFUSACTOR_DECRYPT_STR_0("\73\75\114\86\43\116\86\85\110", "\23\57\57\29\34\68");
obf_cached_str[808] = LUAOBFUSACTOR_DECRYPT_STR_0("\129\253\234", "\35\210\184\166\168");
obf_cached_str[807] = LUAOBFUSACTOR_DECRYPT_STR_0("\203\93\83\113\84\194\103\65\109\66\214\93", "\59\166\56\39\25");
obf_cached_str[806] = LUAOBFUSACTOR_DECRYPT_STR_0("\23\213\166\0\193\43\127\5", "\28\113\161\223\112\164\116");
obf_cached_str[805] = LUAOBFUSACTOR_DECRYPT_STR_0("\252\78\158\71\137\246\69\221", "\169\159\58\231\55\236\169\38");
obf_cached_str[804] = LUAOBFUSACTOR_DECRYPT_STR_0("\51\233\209\91\53\44\54\233\209\91\53", "\115\85\157\168\43\80");
obf_cached_str[803] = LUAOBFUSACTOR_DECRYPT_STR_0("\254\254\34\162\246\213\61\166\234\250\62", "\210\147\138\91");
obf_cached_str[802] = LUAOBFUSACTOR_DECRYPT_STR_0("\14\212\63\9\24\255\37\13\4\208\35", "\121\125\160\70");
obf_cached_str[801] = LUAOBFUSACTOR_DECRYPT_STR_0("\126\183\166\18\56\106\191\165\19\41\119\172\163", "\94\24\222\200\118");
obf_cached_str[800] = LUAOBFUSACTOR_DECRYPT_STR_0("\75\72\67\213\205\168\11", "\110\38\45\46\186\164\210");
obf_cached_str[799] = LUAOBFUSACTOR_DECRYPT_STR_0("\46\91\38\186\62\86\55\169\41\86\52", "\200\93\62\71");
obf_cached_str[798] = LUAOBFUSACTOR_DECRYPT_STR_0("\126\135\1\26", "\182\18\232\96\126\219\90\165");
obf_cached_str[797] = LUAOBFUSACTOR_DECRYPT_STR_0("\74\163\180\27\60\68\179\191\8\33\71\170\181\31\38\68\163", "\78\43\199\208\107");
obf_cached_str[796] = LUAOBFUSACTOR_DECRYPT_STR_0("\50\188\179\161\89\60\172\184\178\68\63", "\43\83\216\215\209");
obf_cached_str[795] = LUAOBFUSACTOR_DECRYPT_STR_0("\237\49\160\135\55\137\3\47\229\58\170", "\91\140\85\196\225\66\231\96");
obf_cached_str[794] = LUAOBFUSACTOR_DECRYPT_STR_0("\243\204\246\9\118\228\42\233\214\254\38\74\243\63\242\217\244\28", "\89\128\184\153\121\41\145");
obf_cached_str[793] = LUAOBFUSACTOR_DECRYPT_STR_0("\153\237\33\201\25\62\175\83\141\243\33", "\33\236\158\68\150\122\92\201");
obf_cached_str[792] = LUAOBFUSACTOR_DECRYPT_STR_0("\19\165\126\97\140", "\84\119\192\28\20\235\108");
obf_cached_str[788] = LUAOBFUSACTOR_DECRYPT_STR_0("\51\34\191\25\90\45", "\59\65\71\203\111");
obf_cached_str[786] = LUAOBFUSACTOR_DECRYPT_STR_0("\170\170\104\67\63\16", "\31\216\207\28\53\94\124");
obf_cached_str[785] = LUAOBFUSACTOR_DECRYPT_STR_0("\69\0", "\191\35\112\187\170\228\213\101");
obf_cached_str[783] = LUAOBFUSACTOR_DECRYPT_STR_0("\116\68", "\156\18\52\121");
obf_cached_str[782] = LUAOBFUSACTOR_DECRYPT_STR_0("\2\153", "\168\100\233\158\232\169");
obf_cached_str[781] = LUAOBFUSACTOR_DECRYPT_STR_0("\193\48", "\134\167\64\214");
obf_cached_str[780] = LUAOBFUSACTOR_DECRYPT_STR_0("\31\101\203\182\23\21\125", "\120\118\22\169\218");
obf_cached_str[774] = LUAOBFUSACTOR_DECRYPT_STR_0("\107\48", "\173\25\26\228");
obf_cached_str[773] = LUAOBFUSACTOR_DECRYPT_STR_0("\166\31\220\4\17\223", "\179\212\122\168\114\112");
obf_cached_str[771] = LUAOBFUSACTOR_DECRYPT_STR_0("\29\212\172\31\14\221", "\105\111\177\216");
obf_cached_str[769] = LUAOBFUSACTOR_DECRYPT_STR_0("\100\84\46\244\93\217", "\181\22\49\90\130\60");
obf_cached_str[767] = LUAOBFUSACTOR_DECRYPT_STR_0("\75\155", "\64\45\235\148");
obf_cached_str[766] = LUAOBFUSACTOR_DECRYPT_STR_0("\237\214", "\225\139\166\141");
obf_cached_str[765] = LUAOBFUSACTOR_DECRYPT_STR_0("\18\110", "\179\116\30\180");
obf_cached_str[761] = LUAOBFUSACTOR_DECRYPT_STR_0("\62\79\205\233\58\81\174", "\197\87\60\175\133\85\50");
obf_cached_str[760] = LUAOBFUSACTOR_DECRYPT_STR_0("\202\61\121\58\215\122\195\38", "\19\172\72\23\89\163");
obf_cached_str[757] = LUAOBFUSACTOR_DECRYPT_STR_0("\27\26\115\149\8", "\61\114\126\40\170\85");
obf_cached_str[755] = LUAOBFUSACTOR_DECRYPT_STR_0("\75\95\27\135\64", "\29\34\59\64\184");
obf_cached_str[751] = LUAOBFUSACTOR_DECRYPT_STR_0("\7\37\255\94\221\172\32\24\215\1", "\216\82\113\185\102\142");
obf_cached_str[749] = LUAOBFUSACTOR_DECRYPT_STR_0("\88\118\178\162\230\23\219\197\95", "\176\58\25\221\206\176\118\183");
obf_cached_str[744] = LUAOBFUSACTOR_DECRYPT_STR_0("\73\241\54\250\213\220\13\166\65\235\38", "\199\45\158\67\152\185\185\91");
obf_cached_str[739] = LUAOBFUSACTOR_DECRYPT_STR_0("\122\4\130\124\220\72\120\41", "\71\28\113\236\31\168\33\23");
obf_cached_str[738] = LUAOBFUSACTOR_DECRYPT_STR_0("\255\23\97\13\32", "\159\156\120\20\99\84\101\206");
obf_cached_str[736] = LUAOBFUSACTOR_DECRYPT_STR_0("\52\53\174\178\35\24\3\146", "\78\122\102\224\199");
obf_cached_str[735] = LUAOBFUSACTOR_DECRYPT_STR_0("\82\59\64\241\90\166\1", "\111\48\84\47\157\63\199");
obf_cached_str[732] = LUAOBFUSACTOR_DECRYPT_STR_0("\24\151\82\22\34\165\125\15\51\133\109\17\55\189", "\99\86\196\31");
obf_cached_str[729] = LUAOBFUSACTOR_DECRYPT_STR_0("\27\147\199\25\29\226\55\172\239\40\0\224\33\169\229\2\8\241\44", "\131\85\192\138\108\105");
obf_cached_str[728] = LUAOBFUSACTOR_DECRYPT_STR_0("\23\188\186\4\238", "\31\99\221\216\104\139\194\16");
obf_cached_str[726] = LUAOBFUSACTOR_DECRYPT_STR_0("\130\39\13\216\165\17\162\19", "\120\204\116\94\172\215");
obf_cached_str[725] = LUAOBFUSACTOR_DECRYPT_STR_0("\23\248\190\133\52\3", "\90\100\140\204\236");
obf_cached_str[723] = LUAOBFUSACTOR_DECRYPT_STR_0("\91\216\44\24\179\74\112\103", "\21\21\139\98\109\222\40");
obf_cached_str[722] = LUAOBFUSACTOR_DECRYPT_STR_0("\60\89\223\170\64\187", "\154\82\44\178\200\37\201");
obf_cached_str[720] = LUAOBFUSACTOR_DECRYPT_STR_0("\90\88\214\231\186", "\181\56\52\185\132\209\236");
obf_cached_str[719] = LUAOBFUSACTOR_DECRYPT_STR_0("\16\60\61\236\218\245\44\0\11\219\208\200\59\19\13\196\247\247\32\17\5", "\155\79\114\110\175\181");
obf_cached_str[718] = LUAOBFUSACTOR_DECRYPT_STR_0("\190\101\86", "\193\215\22\55\38\44\62\93");
obf_cached_str[717] = LUAOBFUSACTOR_DECRYPT_STR_0("\77\29\87\79\162\89", "\60\36\115\33\32\201");
obf_cached_str[716] = LUAOBFUSACTOR_DECRYPT_STR_0("\149\31\62\168\164\199\130\30", "\177\231\122\77\205\214");
obf_cached_str[715] = LUAOBFUSACTOR_DECRYPT_STR_0("\21\68\94\229\63", "\76\115\40\63\130");
obf_cached_str[714] = LUAOBFUSACTOR_DECRYPT_STR_0("\184\224\168\179\160\174\186\131\225\190\175\191\184\173", "\223\220\137\219\195\207\221");
obf_cached_str[712] = LUAOBFUSACTOR_DECRYPT_STR_0("\43\164\8\160\37\82\54\36\187\29\171", "\83\72\203\120\217\122\58");
obf_cached_str[709] = LUAOBFUSACTOR_DECRYPT_STR_0("\74\164\18\113", "\20\57\205\104");
obf_cached_str[707] = LUAOBFUSACTOR_DECRYPT_STR_0("\250\64\32\56\145\254\64\55", "\227\136\37\83\93");
obf_cached_str[704] = LUAOBFUSACTOR_DECRYPT_STR_0("\198\52\180\76\146\203\33\179\64\146", "\224\162\81\199\47");
obf_cached_str[702] = LUAOBFUSACTOR_DECRYPT_STR_0("\213\67\93\252\17", "\122\183\47\50\159");
obf_cached_str[699] = LUAOBFUSACTOR_DECRYPT_STR_0("\253\44\34\37\244", "\70\159\64\77");
obf_cached_str[694] = LUAOBFUSACTOR_DECRYPT_STR_0("\196\143\187\103\2\49\194", "\92\167\237\221\21\99");
obf_cached_str[692] = LUAOBFUSACTOR_DECRYPT_STR_0("\210\102", "\103\140\16\33\16\158\102\186");
obf_cached_str[690] = LUAOBFUSACTOR_DECRYPT_STR_0("\24\47\83\87\241\18\55", "\158\113\92\49\59");
obf_cached_str[689] = LUAOBFUSACTOR_DECRYPT_STR_0("\46\200\31\134\40\216\22", "\234\71\187\125");
obf_cached_str[688] = LUAOBFUSACTOR_DECRYPT_STR_0("\39\27\83\203\225\254", "\162\84\111\33\162\143\153\217");
obf_cached_str[686] = LUAOBFUSACTOR_DECRYPT_STR_0("\82\57\4\178\221\69\53\40\170\215\90\32\18\176\237\66", "\178\54\80\119\194");
obf_cached_str[684] = LUAOBFUSACTOR_DECRYPT_STR_0("\6\211\92\16\51\167\36\177\21\217\94\54\24", "\221\101\188\44\105\108\207\65");
obf_cached_str[682] = LUAOBFUSACTOR_DECRYPT_STR_0("\193\145\101\13\198\196\242\20\222\138\116\19\250\220\187\2\215\151\118\20", "\118\178\229\23\120\165\176\210");
obf_cached_str[680] = LUAOBFUSACTOR_DECRYPT_STR_0("\9\248\119\33\168", "\109\127\151\30\69\130");
obf_cached_str[676] = LUAOBFUSACTOR_DECRYPT_STR_0("\227\4\66\222\203\50\66\223\217\35", "\187\188\91\44");
obf_cached_str[675] = LUAOBFUSACTOR_DECRYPT_STR_0("\32\42\63\70\76\122\110", "\174\127\117\86\40\40\31\22");
obf_cached_str[674] = LUAOBFUSACTOR_DECRYPT_STR_0("\134\33\71\86\219\68\245\24\183\25", "\113\217\126\51\57\168\48\135");
obf_cached_str[673] = LUAOBFUSACTOR_DECRYPT_STR_0("\54\34\241\229\205\191\101\57\225\250\205\148\42\52\233\245\205\191", "\203\69\86\131\144\174");
obf_cached_str[671] = LUAOBFUSACTOR_DECRYPT_STR_0("\169\62\230\93\172\35\250\118\168", "\41\220\87\136");
obf_cached_str[670] = LUAOBFUSACTOR_DECRYPT_STR_0("\36\61\235\184\102\57\61\40\160\254", "\65\24\24\152\134\86");
obf_cached_str[669] = LUAOBFUSACTOR_DECRYPT_STR_0("\58\207\123", "\233\84\166\23\217");
obf_cached_str[668] = LUAOBFUSACTOR_DECRYPT_STR_0("\179\88\23\86\200\47\180\110\13", "\91\198\49\121\34\184");
obf_cached_str[667] = LUAOBFUSACTOR_DECRYPT_STR_0("\112\77\9", "\80\30\36\101\84\161\64");
obf_cached_str[666] = LUAOBFUSACTOR_DECRYPT_STR_0("\225\85", "\170\196\45\94\20");
obf_cached_str[665] = LUAOBFUSACTOR_DECRYPT_STR_0("\236\146\127\4\123\42", "\128\201\234\90\52\67\82");
obf_cached_str[664] = LUAOBFUSACTOR_DECRYPT_STR_0("\89\178\149\47\129\182\29\178\149\43", "\134\101\151\230\21\161");
obf_cached_str[661] = LUAOBFUSACTOR_DECRYPT_STR_0("\211\0\162\11\174\194\0\246\26\172\146\29\184\10\166\202\84\183\78\141\231\56\154\78\172\208\30\179\13\183", "\195\178\116\214\110");
obf_cached_str[659] = LUAOBFUSACTOR_DECRYPT_STR_0("\221\205\236\6\209\201\236\67\200\214\184\10\210\221\253\27\156\216\184\45\233\245\212\67\211\219\242\6\223\205", "\99\188\185\152");
obf_cached_str[658] = LUAOBFUSACTOR_DECRYPT_STR_0("\243\246\227\70\106\37\194\205\232\91", "\76\172\169\141\35\29");
obf_cached_str[657] = LUAOBFUSACTOR_DECRYPT_STR_0("\135\197\57\200\126\189\226", "\26\216\154\80\166");
obf_cached_str[656] = LUAOBFUSACTOR_DECRYPT_STR_0("\127\19\254\5\83\64\82\37\228\13", "\52\32\76\138\106\32");
obf_cached_str[655] = LUAOBFUSACTOR_DECRYPT_STR_0("\81\189\107\228\222\42\4\32\64\163\122\206\222\50\69\60\81", "\79\34\201\25\145\189\94\36");
obf_cached_str[653] = LUAOBFUSACTOR_DECRYPT_STR_0("\187\174\62\0\115\189\230\30\174\181\106\12\112\169\247\70\250\187\106\43\75\129\222\30\185\182\43\22\109", "\62\218\218\74\101\30\205\146");
obf_cached_str[652] = LUAOBFUSACTOR_DECRYPT_STR_0("\24\86\88\67\185\9\86\12\82\187\89\75\66\66\177\1\2\77\6\154\44\110\96\6\183\21\67\95\85", "\212\121\34\44\38");
obf_cached_str[650] = LUAOBFUSACTOR_DECRYPT_STR_0("\182\53\131\125\75\161\112\147\119\73\160\51\148\125\87\229\49\140\96\64\164\52\153\50\76\168\32\140\119\72\160\62\148\119\65", "\37\197\80\224\18");
obf_cached_str[649] = LUAOBFUSACTOR_DECRYPT_STR_0("\142\61\201\167\252\80\136\137\36\216\191\240\82\131\199\34\220\186\236\84\159\130\52\153\173\246\79\205\148\39\208\177\227\81\132\137\55\153\188\240\73\133\199\62\220\188\185\78\136\139\53\218\191\246\79", "\237\231\80\185\203\153\61");
obf_cached_str[648] = LUAOBFUSACTOR_DECRYPT_STR_0("\5\167\237\205\7\166\185\203\7\182\185\195\7\183\247\193\82\226\188\214", "\165\104\194\153");
obf_cached_str[646] = LUAOBFUSACTOR_DECRYPT_STR_0("\171\152\224\192\18\177\174\198\228\192\18\177\174\195\255\132\23\248\176\203\255\132\30", "\213\142\235\218\224\55");
obf_cached_str[645] = LUAOBFUSACTOR_DECRYPT_STR_0("\22\38\119\201\22\176\57\16", "\87\100\67\17\170\121\197");
obf_cached_str[640] = LUAOBFUSACTOR_DECRYPT_STR_0("\123\192\8\190\134\45\231\0\192\8", "\186\32\229\123\158\163\94");
obf_cached_str[638] = LUAOBFUSACTOR_DECRYPT_STR_0("\103\9\167\170\13\156\7\97", "\105\21\108\193\201\98\233");
obf_cached_str[637] = LUAOBFUSACTOR_DECRYPT_STR_0("\191\48\89\95\164\59", "\62\205\85\45");
obf_cached_str[636] = LUAOBFUSACTOR_DECRYPT_STR_0("\51\170\225\14\110\55\179\240\0\111\55", "\28\82\223\149\97");
obf_cached_str[635] = LUAOBFUSACTOR_DECRYPT_STR_0("\200\78\66\163\13\148\9", "\108\186\43\46\198\108\231");
obf_cached_str[634] = LUAOBFUSACTOR_DECRYPT_STR_0("\134\243\225\117\114\135\227\214\123\96\146", "\16\235\134\149\20");
obf_cached_str[633] = LUAOBFUSACTOR_DECRYPT_STR_0("\240\34\103\6", "\127\147\77\23");
obf_cached_str[632] = LUAOBFUSACTOR_DECRYPT_STR_0("\70\22\69", "\200\40\115\50\140");
obf_cached_str[631] = LUAOBFUSACTOR_DECRYPT_STR_0("\83\87\79\16\196", "\167\50\59\35\127");
obf_cached_str[630] = LUAOBFUSACTOR_DECRYPT_STR_0("\67\68\150\114\174\95", "\199\49\33\226\19");
obf_cached_str[629] = LUAOBFUSACTOR_DECRYPT_STR_0("\139\46\146\134\152\62\138\140\139\40\131", "\233\234\91\230");
obf_cached_str[628] = LUAOBFUSACTOR_DECRYPT_STR_0("\218\128\181\169\62\219\128", "\95\168\229\217\204");
obf_cached_str[626] = LUAOBFUSACTOR_DECRYPT_STR_0("\58\65\42\241\125\99\48\91\42\226\35\120\59\80", "\17\85\55\79\131\80");
obf_cached_str[625] = LUAOBFUSACTOR_DECRYPT_STR_0("\21\211\2\80\67\42", "\232\103\182\118\38\34\70\43");
obf_cached_str[624] = LUAOBFUSACTOR_DECRYPT_STR_0("\1\215\26\232\201\4\192\5\161\194\24\213\24\226\211\5\193", "\167\96\165\125\129");
obf_cached_str[622] = LUAOBFUSACTOR_DECRYPT_STR_0("\213\208\171\68\250\246", "\94\142\143\142\126\167\210\192");
obf_cached_str[615] = LUAOBFUSACTOR_DECRYPT_STR_0("\165\128\31\225\175\146", "\146\202\230\121");
obf_cached_str[614] = LUAOBFUSACTOR_DECRYPT_STR_0("\81\189", "\28\50\201\114\154\128\183\138");
obf_cached_str[613] = LUAOBFUSACTOR_DECRYPT_STR_0("\213\253\3\100\8", "\109\182\137\122\20");
obf_cached_str[612] = LUAOBFUSACTOR_DECRYPT_STR_0("\185\212\170\94\50", "\223\202\160\211\46\87\51\210");
obf_cached_str[611] = LUAOBFUSACTOR_DECRYPT_STR_0("\64\9\137\170", "\225\46\104\228\207\156");
obf_cached_str[610] = LUAOBFUSACTOR_DECRYPT_STR_0("\150\62\213\62\213\132\59", "\167\201\97\188\80\177\225\67");
obf_cached_str[609] = LUAOBFUSACTOR_DECRYPT_STR_0("\9\199\219\28\78\73\36\241\193\20", "\61\86\152\175\115\61");
obf_cached_str[608] = LUAOBFUSACTOR_DECRYPT_STR_0("\245\84\1\24\121\194\165\161\228\74\16\50\115\192\228\188", "\206\134\32\115\109\26\182\133");
obf_cached_str[606] = LUAOBFUSACTOR_DECRYPT_STR_0("\212\69\24\166\190\0\213\6", "\95\161\44\118\210\134");
obf_cached_str[603] = LUAOBFUSACTOR_DECRYPT_STR_0("\162\248\233\208", "\182\193\156\140");
obf_cached_str[602] = LUAOBFUSACTOR_DECRYPT_STR_0("\228\203\249\104\198\22\231\181\227", "\62\186\144\220\19\227");
obf_cached_str[599] = LUAOBFUSACTOR_DECRYPT_STR_0("\41\252\243\196\57\200\206\248\33\250\171\130\89\141\168", "\170\119\167\129");
obf_cached_str[590] = LUAOBFUSACTOR_DECRYPT_STR_0("\90\11\239\209\246\140", "\22\41\127\157\184\152\235");
obf_cached_str[589] = LUAOBFUSACTOR_DECRYPT_STR_0("\97\52\86", "\153\23\116\108\80\191\69\219");
obf_cached_str[587] = LUAOBFUSACTOR_DECRYPT_STR_0("\200\125\61", "\168\129\48\109\81\19\34\104");
obf_cached_str[585] = LUAOBFUSACTOR_DECRYPT_STR_0("\33\68\235\206\35\75\232", "\188\66\38\141");
obf_cached_str[583] = LUAOBFUSACTOR_DECRYPT_STR_0("\224\221\130", "\233\169\144\210\53\87");
obf_cached_str[582] = LUAOBFUSACTOR_DECRYPT_STR_0("\255\116\183\218", "\37\150\26\196\174\228");
obf_cached_str[581] = LUAOBFUSACTOR_DECRYPT_STR_0("\217\35\252\38\42", "\191\186\79\157\85\89\127\151");
obf_cached_str[580] = LUAOBFUSACTOR_DECRYPT_STR_0("\115\174\195\158\103\190\149\147\118\163\210\131\32\174\195\158\107\253\198\150\32", "\179\83\142\230");
obf_cached_str[579] = LUAOBFUSACTOR_DECRYPT_STR_0("\55\63\224\217\174\188\30\184\50", "\215\86\91\132\180\203\200\118");
obf_cached_str[578] = LUAOBFUSACTOR_DECRYPT_STR_0("\41\56\218\40\45\40\214\42\44", "\69\72\92\190");
obf_cached_str[566] = LUAOBFUSACTOR_DECRYPT_STR_0("\141\37\161\188\21\135", "\116\235\74\211\209");
obf_cached_str[563] = LUAOBFUSACTOR_DECRYPT_STR_0("\128\141\21\8\220\62", "\82\230\226\103\101\189");
obf_cached_str[555] = LUAOBFUSACTOR_DECRYPT_STR_0("\73\228\65\177\50\18\226\52\180\50\18\149\51\184\100\75", "\23\97\191\31\157");
obf_cached_str[551] = LUAOBFUSACTOR_DECRYPT_STR_0("\202\113\217\184\3\240\215\177\104\143\225\118\128\160\177\39\128\183\23\142\250\190\124\241\204\14\149\212\191\125\143\172\14\216\163\176", "\137\148\84\170\146\43\171");
obf_cached_str[549] = LUAOBFUSACTOR_DECRYPT_STR_0("\73\229\228\32\223\179", "\110\58\145\150\73\177\212\103");
obf_cached_str[548] = LUAOBFUSACTOR_DECRYPT_STR_0("\163\139\58\172\203\178\174\134\54\186\152\247\184\151\62\188\204\247\164\203\123\184\215\230\224\194\40", "\146\192\231\91\223\184");
obf_cached_str[547] = LUAOBFUSACTOR_DECRYPT_STR_0("\166\94\105\225\77\178", "\35\213\42\27\136");
obf_cached_str[545] = LUAOBFUSACTOR_DECRYPT_STR_0("\160\244\232\167\164\187\186\162\161\171\174\229\241\238\231\160\228\162\161\171\174\229\241\226\169\174\251\231\226\162\183\230\231\161\179\170\242\174\226\160\160\226\162\231\180", "\199\207\150\130\194");
obf_cached_str[544] = LUAOBFUSACTOR_DECRYPT_STR_0("\179\169\102\172\63\39", "\64\192\221\20\197\81");
obf_cached_str[543] = LUAOBFUSACTOR_DECRYPT_STR_0("\103\9\180\130\31\119\16\165\148\30\52\18\171\147\77\114\19\177\137\9\52\89\183", "\109\20\124\196\231");
obf_cached_str[541] = LUAOBFUSACTOR_DECRYPT_STR_0("\253\184\245\44\194\5\255\184\230\58\208\65\231\244\240\58\215\76\240\177\240\127\148\86", "\37\158\212\148\95\177");
obf_cached_str[539] = LUAOBFUSACTOR_DECRYPT_STR_0("\132\62\238\60\225\160\35\128\142\40\199\53\227\167\15", "\231\235\92\132\89\130\212\124");
obf_cached_str[536] = LUAOBFUSACTOR_DECRYPT_STR_0("\18\94\225\98\232", "\94\81\50\128\17\155\182\136");
obf_cached_str[532] = LUAOBFUSACTOR_DECRYPT_STR_0("\121\42\67\63\126\132\3\121\13\73\58\111", "\100\28\82\32\87\31\234");
obf_cached_str[531] = LUAOBFUSACTOR_DECRYPT_STR_0("\116\206\58", "\95\29\163\74\33\67");
obf_cached_str[530] = LUAOBFUSACTOR_DECRYPT_STR_0("\206\215\20\119\23\164\176\63\217\233\0\74", "\79\188\182\99\40\116\208\201");
obf_cached_str[529] = LUAOBFUSACTOR_DECRYPT_STR_0("\250\127\31\215\74\110\187\248\123", "\194\136\30\104\136\41\26");
obf_cached_str[528] = LUAOBFUSACTOR_DECRYPT_STR_0("\224\140\150\22\6\230\148\145\44", "\96\146\237\225\73");
obf_cached_str[527] = LUAOBFUSACTOR_DECRYPT_STR_0("\33\216\226\42\79", "\42\76\172\155\90");
obf_cached_str[526] = LUAOBFUSACTOR_DECRYPT_STR_0("\117\65\120\52", "\229\27\32\21\81\162\217\210");
obf_cached_str[525] = LUAOBFUSACTOR_DECRYPT_STR_0("\28\205\205\143\217\227\242\29", "\157\111\168\161\234\186\151");
obf_cached_str[524] = LUAOBFUSACTOR_DECRYPT_STR_0("\1\131\75\51\58\185\90", "\93\94\220\34");
obf_cached_str[523] = LUAOBFUSACTOR_DECRYPT_STR_0("\134\221\212\192\252\175\171\235\206\200", "\219\217\130\160\175\143");
obf_cached_str[522] = LUAOBFUSACTOR_DECRYPT_STR_0("\225\149\203\247\137\98\90\253\131\211\225\181\123\31\230\137\214\230", "\122\146\225\185\130\234\22");
obf_cached_str[520] = LUAOBFUSACTOR_DECRYPT_STR_0("\212\87\163\131\20\38\151\220\74\180\131\26\44\175\220\123\186\155\23\39\165\220\92\163\138\15\43\167\215\65", "\200\185\50\215\235\123\66");
obf_cached_str[515] = LUAOBFUSACTOR_DECRYPT_STR_0("\200\192\45\57", "\169\161\182\76\75\39\160");
obf_cached_str[514] = LUAOBFUSACTOR_DECRYPT_STR_0("\25\0\23\36\187\237\7\28", "\131\107\101\118\64\212");
obf_cached_str[513] = LUAOBFUSACTOR_DECRYPT_STR_0("\255\27\11\215\76", "\185\156\111\114\167\41\226\29");
obf_cached_str[512] = LUAOBFUSACTOR_DECRYPT_STR_0("\222\207\34\21\206", "\68\173\187\91\101\171");
obf_cached_str[511] = LUAOBFUSACTOR_DECRYPT_STR_0("\95\129\225\65\73\150", "\53\44\228\149");
obf_cached_str[510] = LUAOBFUSACTOR_DECRYPT_STR_0("\134\10\217\241\170\149", "\103\225\111\173\133\207\231");
obf_cached_str[509] = LUAOBFUSACTOR_DECRYPT_STR_0("\196\40\224\75", "\45\170\73\141\46\56\136");
obf_cached_str[508] = LUAOBFUSACTOR_DECRYPT_STR_0("\224\224\9\171\219\218\24", "\197\191\191\96");
obf_cached_str[507] = LUAOBFUSACTOR_DECRYPT_STR_0("\18\113\49\14\62\90\55\8\35\73", "\97\77\46\69");
obf_cached_str[506] = LUAOBFUSACTOR_DECRYPT_STR_0("\250\250\99\169\45\198\3\230\236\123\191\17\194\81\230\254\116\174\58\203", "\35\137\142\17\220\78\178");
obf_cached_str[504] = LUAOBFUSACTOR_DECRYPT_STR_0("\42\111\171\83", "\64\67\25\202\33\183");
obf_cached_str[503] = LUAOBFUSACTOR_DECRYPT_STR_0("\223\199\168\95\185\184\193\219", "\214\173\162\201\59\214");
obf_cached_str[502] = LUAOBFUSACTOR_DECRYPT_STR_0("\42\209\253\231\25", "\193\73\165\132\151\124\130");
obf_cached_str[500] = LUAOBFUSACTOR_DECRYPT_STR_0("\212\21\152\210\210", "\162\183\97\225");
obf_cached_str[499] = LUAOBFUSACTOR_DECRYPT_STR_0("\119\199\236\188\164", "\193\20\179\149\204");
obf_cached_str[498] = LUAOBFUSACTOR_DECRYPT_STR_0("\77\212\84\65\141", "\232\62\160\45\49");
obf_cached_str[497] = LUAOBFUSACTOR_DECRYPT_STR_0("\88\251\85\146\187\82", "\189\43\158\33\230\222\32\119");
obf_cached_str[493] = LUAOBFUSACTOR_DECRYPT_STR_0("\225\208\247\9\47\183\198\185", "\92\146\181\131\44");
obf_cached_str[492] = LUAOBFUSACTOR_DECRYPT_STR_0("\212\239\96\111\212\167", "\132\167\138\20\27\177\213\220");
obf_cached_str[491] = LUAOBFUSACTOR_DECRYPT_STR_0("\187\54\175\71\192\186", "\165\200\83\219\51");
obf_cached_str[490] = LUAOBFUSACTOR_DECRYPT_STR_0("\235\113\73\58\126\240\220\224", "\176\153\20\40\94\17\158");
obf_cached_str[489] = LUAOBFUSACTOR_DECRYPT_STR_0("\89\222\24\209\174\76", "\203\62\187\108\165");
obf_cached_str[488] = LUAOBFUSACTOR_DECRYPT_STR_0("\184\178\26\82\186\165", "\38\223\215\110");
obf_cached_str[487] = LUAOBFUSACTOR_DECRYPT_STR_0("\62\37\36\2\162\29", "\111\89\64\80\118\199");
obf_cached_str[484] = LUAOBFUSACTOR_DECRYPT_STR_0("\185\142\128\158\202\254\133\235\187\137\133", "\182\145\160\169");
obf_cached_str[481] = LUAOBFUSACTOR_DECRYPT_STR_0("\144\26\210\136\184\240\142\6", "\158\226\127\179\236\215");
obf_cached_str[479] = LUAOBFUSACTOR_DECRYPT_STR_0("\197\18\7\41\211\5", "\93\182\119\115");
obf_cached_str[477] = LUAOBFUSACTOR_DECRYPT_STR_0("\29\37\65\157\56\57", "\180\122\64\53\233\93\75");
obf_cached_str[475] = LUAOBFUSACTOR_DECRYPT_STR_0("\202\199\1\108", "\30\163\177\96");
obf_cached_str[473] = LUAOBFUSACTOR_DECRYPT_STR_0("\239\153\157\7\249", "\119\156\237\228");
obf_cached_str[469] = LUAOBFUSACTOR_DECRYPT_STR_0("\220\136\19\198\198\145\22\136\217\148\23\220\198\133\23\196\137\195\11", "\168\169\230\120");
obf_cached_str[468] = LUAOBFUSACTOR_DECRYPT_STR_0("\238\172\225\122\84\242", "\149\157\216\147\19\58");
obf_cached_str[458] = LUAOBFUSACTOR_DECRYPT_STR_0("\219\16\188\9\244\24", "\112\132\125\200");
obf_cached_str[457] = LUAOBFUSACTOR_DECRYPT_STR_0("\214\66\210\144\105", "\114\137\43\188\227\29\88");
obf_cached_str[456] = LUAOBFUSACTOR_DECRYPT_STR_0("\123\219\93\103\164\75\210\75", "\204\36\182\56\19");
obf_cached_str[452] = LUAOBFUSACTOR_DECRYPT_STR_0("\42\187\43\33\174", "\114\117\210\69\82\218\42");
obf_cached_str[448] = LUAOBFUSACTOR_DECRYPT_STR_0("\88\90\63\229\136\89\108\204", "\181\40\40\80\149\237\43\24");
obf_cached_str[445] = LUAOBFUSACTOR_DECRYPT_STR_0("\10\215\35\167", "\101\100\182\78\194\68\196");
obf_cached_str[444] = LUAOBFUSACTOR_DECRYPT_STR_0("\28\159\88\94\184\90\49\169\66\86", "\46\67\192\44\49\203");
obf_cached_str[443] = LUAOBFUSACTOR_DECRYPT_STR_0("\4\254\238\192\187", "\91\91\144\143\173\222\128");
obf_cached_str[441] = LUAOBFUSACTOR_DECRYPT_STR_0("\57\165\71\35\180\242", "\147\102\200\51\90\196\151\233");
obf_cached_str[440] = LUAOBFUSACTOR_DECRYPT_STR_0("\152\86\49\219\160", "\124\199\63\95\168\212\107\196");
obf_cached_str[439] = LUAOBFUSACTOR_DECRYPT_STR_0("\16\3\73\75\249\162\43\29", "\205\79\110\44\63\145");
obf_cached_str[438] = LUAOBFUSACTOR_DECRYPT_STR_0("\21\225\143\223\207\31\87\216", "\171\74\140\234\171\167\112\51");
obf_cached_str[437] = LUAOBFUSACTOR_DECRYPT_STR_0("\143\254\28\89\44", "\73\208\144\125\52");
obf_cached_str[436] = LUAOBFUSACTOR_DECRYPT_STR_0("\212\18\116\76\239\40\101", "\34\139\77\29");
obf_cached_str[435] = LUAOBFUSACTOR_DECRYPT_STR_0("\234\5\229\141\215\255", "\46\140\106\151\224\182\147");
obf_cached_str[434] = LUAOBFUSACTOR_DECRYPT_STR_0("\4\83", "\60\103\39\47\147\24");
obf_cached_str[433] = LUAOBFUSACTOR_DECRYPT_STR_0("\180\27\169\4\73", "\125\215\111\208\116\44");
obf_cached_str[432] = LUAOBFUSACTOR_DECRYPT_STR_0("\160\37\9\52\163", "\68\198\81\112");
obf_cached_str[431] = LUAOBFUSACTOR_DECRYPT_STR_0("\221\60\64\98\235", "\142\176\72\57\18");
obf_cached_str[430] = LUAOBFUSACTOR_DECRYPT_STR_0("\253\199\50\228\255\198\53", "\140\144\162\70");
obf_cached_str[429] = LUAOBFUSACTOR_DECRYPT_STR_0("\72\202\26\28\235\45\76\193", "\95\56\184\117\108\142");
obf_cached_str[428] = LUAOBFUSACTOR_DECRYPT_STR_0("\60\169\170\38\30\62\175\172\51\8", "\123\76\219\197\86");
obf_cached_str[427] = LUAOBFUSACTOR_DECRYPT_STR_0("\56\42\21\95\130\58\39\52\9", "\89\72\88\122\43\237");
obf_cached_str[426] = LUAOBFUSACTOR_DECRYPT_STR_0("\253\137\132\209", "\96\147\232\233\180");
obf_cached_str[425] = LUAOBFUSACTOR_DECRYPT_STR_0("\11\250\145\83\12\249", "\62\109\149\227");
obf_cached_str[424] = LUAOBFUSACTOR_DECRYPT_STR_0("\60\213\185\212\243\204\190", "\198\99\138\208\186\151\169");
obf_cached_str[423] = LUAOBFUSACTOR_DECRYPT_STR_0("\210\224\205\47\254\203\203\41\227\216", "\64\141\191\185");
obf_cached_str[422] = LUAOBFUSACTOR_DECRYPT_STR_0("\70\209\11\255\245\177\21\245\11\229\226\170\86\202\21", "\197\53\165\121\138\150");
obf_cached_str[420] = LUAOBFUSACTOR_DECRYPT_STR_0("\167\135\29\178", "\144\201\230\112\215\53\75\188");
obf_cached_str[413] = LUAOBFUSACTOR_DECRYPT_STR_0("\188\129\122\182", "\23\210\224\23\211\71\43");
obf_cached_str[404] = LUAOBFUSACTOR_DECRYPT_STR_0("\250\119\208\52", "\164\148\22\189\81\80\164");
obf_cached_str[403] = LUAOBFUSACTOR_DECRYPT_STR_0("\49\190\2\142\10\132\19", "\224\110\225\107");
obf_cached_str[402] = LUAOBFUSACTOR_DECRYPT_STR_0("\12\147\84\41\32\184\82\47\61\171", "\70\83\204\32");
obf_cached_str[401] = LUAOBFUSACTOR_DECRYPT_STR_0("\214\191\244\254\253\249\181\202\169\236\232\193\254\240\201\174\229\255\241\255", "\149\165\203\134\139\158\141");
obf_cached_str[397] = LUAOBFUSACTOR_DECRYPT_STR_0("\101\146\233\84\27\7", "\124\22\230\155\61\117\96");
obf_cached_str[391] = LUAOBFUSACTOR_DECRYPT_STR_0("\154\150\226", "\116\196\201\200\171\42\19\181");
obf_cached_str[389] = LUAOBFUSACTOR_DECRYPT_STR_0("\242\36\140", "\34\172\123\166\56\128\196");
obf_cached_str[386] = LUAOBFUSACTOR_DECRYPT_STR_0("\2\7\240\161\168\49\31", "\84\108\104\132\216\216");
obf_cached_str[385] = LUAOBFUSACTOR_DECRYPT_STR_0("\10\3\174\14\66\21\29\162\90\74\21\27\239\53\119\34", "\36\122\111\207\122");
obf_cached_str[384] = LUAOBFUSACTOR_DECRYPT_STR_0("\42\255\228\161\88", "\217\101\139\140\196\42\223\183");
obf_cached_str[383] = LUAOBFUSACTOR_DECRYPT_STR_0("\140\71", "\226\227\52\120");
obf_cached_str[380] = LUAOBFUSACTOR_DECRYPT_STR_0("\229\233", "\224\192\154\33\36");
obf_cached_str[379] = LUAOBFUSACTOR_DECRYPT_STR_0("\251\137\206\118", "\109\151\230\175\18");
obf_cached_str[376] = LUAOBFUSACTOR_DECRYPT_STR_0("\53\205\247\237\234\158\60\205\253\160\225\134\39\159\240\239\250\135\55\159\179\243", "\233\83\191\150\128\143");
obf_cached_str[372] = LUAOBFUSACTOR_DECRYPT_STR_0("\108\186", "\83\73\148\230\220");
obf_cached_str[370] = LUAOBFUSACTOR_DECRYPT_STR_0("\8\244", "\197\45\208\154\166\100\159");
obf_cached_str[369] = LUAOBFUSACTOR_DECRYPT_STR_0("\150\143\68\175\178\24\214\214\77\175\184", "\117\179\161\34\221\211");
obf_cached_str[365] = LUAOBFUSACTOR_DECRYPT_STR_0("\168\214\33\5\235\213\36\11\244\219", "\100\134\176\83");
obf_cached_str[364] = LUAOBFUSACTOR_DECRYPT_STR_0("\180\158", "\145\145\186\60\202");
obf_cached_str[350] = LUAOBFUSACTOR_DECRYPT_STR_0("\193\213\54\71\208\218\53", "\24\164\187\82");
obf_cached_str[349] = LUAOBFUSACTOR_DECRYPT_STR_0("\1\33\160\21\241\17\64\31\21", "\126\114\85\193\103\133\78\52");
obf_cached_str[348] = LUAOBFUSACTOR_DECRYPT_STR_0("\61\218\91\238", "\58\77\187\47\134");
obf_cached_str[346] = LUAOBFUSACTOR_DECRYPT_STR_0("\93\54\238\243\76", "\146\56\78\158");
obf_cached_str[343] = LUAOBFUSACTOR_DECRYPT_STR_0("\183\31\237\171\229\85", "\196\145\110\152");
obf_cached_str[341] = LUAOBFUSACTOR_DECRYPT_STR_0("\71\110\158\87\88\90", "\44\97\31\235\56");
obf_cached_str[333] = LUAOBFUSACTOR_DECRYPT_STR_0("\153\2", "\167\179\99\22\77\60\161\207");
obf_cached_str[331] = LUAOBFUSACTOR_DECRYPT_STR_0("\217\161", "\160\171\195\48\177");
obf_cached_str[329] = LUAOBFUSACTOR_DECRYPT_STR_0("\88\6\203\206\238\150\240\89\10\223", "\133\43\111\172\160\143\226");
obf_cached_str[328] = LUAOBFUSACTOR_DECRYPT_STR_0("\58\3\41\190\60\31\33\181", "\217\85\113\64");
obf_cached_str[327] = LUAOBFUSACTOR_DECRYPT_STR_0("\240\87\80\30", "\193\158\54\61\123");
obf_cached_str[325] = LUAOBFUSACTOR_DECRYPT_STR_0("\202\36\126\165\118\205\46\96", "\21\185\65\18\192");
obf_cached_str[324] = LUAOBFUSACTOR_DECRYPT_STR_0("\164\186\223\79", "\214\208\200\170\42\83\173");
obf_cached_str[323] = LUAOBFUSACTOR_DECRYPT_STR_0("\77\194\68\44\90\199\95\38", "\69\59\163\54");
obf_cached_str[322] = LUAOBFUSACTOR_DECRYPT_STR_0("\110\15\214\200\243\186\117\123", "\28\24\110\164\161\146\222");
obf_cached_str[321] = LUAOBFUSACTOR_DECRYPT_STR_0("\157\28\100\142", "\166\233\110\17\235\115");
obf_cached_str[320] = LUAOBFUSACTOR_DECRYPT_STR_0("\205\186\219\235\24\61\50\203\162\210\247\15", "\95\174\214\186\152\107\98");
obf_cached_str[319] = LUAOBFUSACTOR_DECRYPT_STR_0("\8\20\251\58\65", "\156\97\122\159\95\57");
obf_cached_str[318] = LUAOBFUSACTOR_DECRYPT_STR_0("\71\162\13\236\245\83", "\110\53\199\121\154\148\63\120");
obf_cached_str[317] = LUAOBFUSACTOR_DECRYPT_STR_0("\111\190\242\104\124\183", "\30\29\219\134");
obf_cached_str[316] = LUAOBFUSACTOR_DECRYPT_STR_0("\41\0\107\54", "\74\93\121\27\83");
obf_cached_str[315] = LUAOBFUSACTOR_DECRYPT_STR_0("\250\186", "\106\156\202\106\46\183");
obf_cached_str[314] = LUAOBFUSACTOR_DECRYPT_STR_0("\142\255", "\189\232\143\74\36\198");
obf_cached_str[313] = LUAOBFUSACTOR_DECRYPT_STR_0("\28\37", "\117\122\85\17");
obf_cached_str[311] = LUAOBFUSACTOR_DECRYPT_STR_0("\192\82\194\66\209\162", "\92\178\55\182\52\176\206");
obf_cached_str[309] = LUAOBFUSACTOR_DECRYPT_STR_0("\171\17\102\93\125\181", "\28\217\116\18\43");
obf_cached_str[308] = LUAOBFUSACTOR_DECRYPT_STR_0("\82\225\14\82\13\77", "\33\32\132\122\36\108");
obf_cached_str[307] = LUAOBFUSACTOR_DECRYPT_STR_0("\207\224\244", "\160\174\146\147\213\167");
obf_cached_str[306] = LUAOBFUSACTOR_DECRYPT_STR_0("\4\0\11\62\64\172", "\150\105\101\127\86\47\200");
obf_cached_str[305] = LUAOBFUSACTOR_DECRYPT_STR_0("\180\200\175\183\247\175", "\37\217\173\219\223\152\203");
obf_cached_str[304] = LUAOBFUSACTOR_DECRYPT_STR_0("\83\48\88\233\35", "\155\48\92\57\154\80\205\167");
obf_cached_str[303] = LUAOBFUSACTOR_DECRYPT_STR_0("\19\23\2\175", "\18\125\118\111\202");
obf_cached_str[301] = LUAOBFUSACTOR_DECRYPT_STR_0("\197\50\208\126", "\45\177\64\165\27\159\40");
obf_cached_str[300] = LUAOBFUSACTOR_DECRYPT_STR_0("\126\94\250\2\229\185\49\190\105\90\244\21", "\219\29\50\155\113\150\230\92");
obf_cached_str[298] = LUAOBFUSACTOR_DECRYPT_STR_0("\179\154\229\0", "\81\199\227\149\101\48");
obf_cached_str[297] = LUAOBFUSACTOR_DECRYPT_STR_0("\116\5\11\245\118\4", "\157\25\96\127");
obf_cached_str[296] = LUAOBFUSACTOR_DECRYPT_STR_0("\74\43\41\13\252\219\137\79\26\63\16\225\194\135\64\42\35", "\232\35\69\79\98\142\182");
obf_cached_str[292] = LUAOBFUSACTOR_DECRYPT_STR_0("\169\76\182\57\71\42", "\158\219\41\194\79\38\70\202");
obf_cached_str[291] = LUAOBFUSACTOR_DECRYPT_STR_0("\235\192\244\157\248\201", "\235\153\165\128");
obf_cached_str[290] = LUAOBFUSACTOR_DECRYPT_STR_0("\35\181\99\224\48\188", "\150\81\208\23");
obf_cached_str[289] = LUAOBFUSACTOR_DECRYPT_STR_0("\161\6", "\109\199\118\129\166\153");
obf_cached_str[288] = LUAOBFUSACTOR_DECRYPT_STR_0("\32\164", "\79\70\212\117");
obf_cached_str[287] = LUAOBFUSACTOR_DECRYPT_STR_0("\78\168", "\56\40\216\166\199");
obf_cached_str[286] = LUAOBFUSACTOR_DECRYPT_STR_0("\97\245\167\190", "\219\21\140\215");
obf_cached_str[285] = LUAOBFUSACTOR_DECRYPT_STR_0("\110\180\178\101\204\112", "\173\28\209\198\19");
obf_cached_str[284] = LUAOBFUSACTOR_DECRYPT_STR_0("\186\17\233", "\161\219\99\142\153\117");
obf_cached_str[283] = LUAOBFUSACTOR_DECRYPT_STR_0("\72\21\86\62\26\138\166\64", "\201\46\96\56\93\110\227");
obf_cached_str[282] = LUAOBFUSACTOR_DECRYPT_STR_0("\9\20\223\195", "\123\125\102\170\166\137\89\207");
obf_cached_str[281] = LUAOBFUSACTOR_DECRYPT_STR_0("\65\180\4\84\44\77\131\246", "\149\55\213\118\61\77\41\234");
obf_cached_str[280] = LUAOBFUSACTOR_DECRYPT_STR_0("\71\116\221\253\22\85\124\204", "\119\49\21\175\148");
obf_cached_str[279] = LUAOBFUSACTOR_DECRYPT_STR_0("\212\201\16\247\62\213", "\185\179\165\127\149\95");
obf_cached_str[278] = LUAOBFUSACTOR_DECRYPT_STR_0("\125\219\23\56\78\70\205\117", "\162\27\174\121\91\58\47");
obf_cached_str[276] = LUAOBFUSACTOR_DECRYPT_STR_0("\201\234\88\161\191\198\240\88", "\203\175\159\54\194");
obf_cached_str[275] = LUAOBFUSACTOR_DECRYPT_STR_0("\25\68\97\86\29\67\117\5\55\13\116\80\26\78\102\76\27\67\40\5\81\94", "\37\116\45\18");
obf_cached_str[274] = LUAOBFUSACTOR_DECRYPT_STR_0("\102\52\181\131\70\121", "\41\21\77\216\225");
obf_cached_str[273] = LUAOBFUSACTOR_DECRYPT_STR_0("\75\207\84\57\59\248", "\146\44\163\59\91\90\148\26");
obf_cached_str[272] = LUAOBFUSACTOR_DECRYPT_STR_0("\181\173", "\74\235\219\90\80\106");
obf_cached_str[271] = LUAOBFUSACTOR_DECRYPT_STR_0("\142\242\30\67\218\177\162", "\170\231\129\124\47\181\210\201");
obf_cached_str[270] = LUAOBFUSACTOR_DECRYPT_STR_0("\201\93", "\122\137\98\93\208\91\170");
obf_cached_str[269] = LUAOBFUSACTOR_DECRYPT_STR_0("\207\10\94\58\196\4\183", "\220\166\121\60\86\171\103");
obf_cached_str[268] = LUAOBFUSACTOR_DECRYPT_STR_0("\44\47", "\173\74\95\62");
obf_cached_str[267] = LUAOBFUSACTOR_DECRYPT_STR_0("\43\32", "\199\77\80\227\113\48");
obf_cached_str[266] = LUAOBFUSACTOR_DECRYPT_STR_0("\163\161\243\172\212\222", "\146\209\196\135\218\181\178\192");
obf_cached_str[265] = LUAOBFUSACTOR_DECRYPT_STR_0("\24\136\208\79\161\113", "\29\106\237\164\57\192");
obf_cached_str[264] = LUAOBFUSACTOR_DECRYPT_STR_0("\38\175", "\73\64\223\71\171\40\201\64");
obf_cached_str[262] = LUAOBFUSACTOR_DECRYPT_STR_0("\207\184\250\192\34\67", "\47\189\221\142\182\67");
obf_cached_str[261] = LUAOBFUSACTOR_DECRYPT_STR_0("\81\28\52\3\66\21", "\117\35\121\64");
obf_cached_str[260] = LUAOBFUSACTOR_DECRYPT_STR_0("\221\83\16\231\121\234", "\111\175\54\100\145\24\134");
obf_cached_str[259] = LUAOBFUSACTOR_DECRYPT_STR_0("\21\215\182\132", "\178\97\174\198\225\48");
obf_cached_str[258] = LUAOBFUSACTOR_DECRYPT_STR_0("\75\182\158\108\169\189", "\209\57\211\234\26\200");
obf_cached_str[257] = LUAOBFUSACTOR_DECRYPT_STR_0("\216\58\0", "\157\185\72\103\144");
obf_cached_str[256] = LUAOBFUSACTOR_DECRYPT_STR_0("\150\198\204\38", "\76\226\191\188\67\224\196\194");
obf_cached_str[255] = LUAOBFUSACTOR_DECRYPT_STR_0("\176\42\89\15", "\48\196\88\44\106\196\68\181");
obf_cached_str[254] = LUAOBFUSACTOR_DECRYPT_STR_0("\48\25\121\60\21\5\199\45\9\28\120\54\15\24\205\49", "\67\86\108\23\95\97\108\168");
obf_cached_str[253] = LUAOBFUSACTOR_DECRYPT_STR_0("\242\19\92\225\49\31\175", "\201\134\106\44\132\85\122");
obf_cached_str[251] = LUAOBFUSACTOR_DECRYPT_STR_0("\132\211\29\225", "\135\231\183\120");
obf_cached_str[250] = LUAOBFUSACTOR_DECRYPT_STR_0("\25\69\24\68\94\164\86", "\191\109\60\104\33\58\193\48");
obf_cached_str[248] = LUAOBFUSACTOR_DECRYPT_STR_0("\86\81\0\186", "\28\53\53\101\220\213");
obf_cached_str[247] = LUAOBFUSACTOR_DECRYPT_STR_0("\84\87\185\51", "\45\32\37\204\86\61\169\79");
obf_cached_str[246] = LUAOBFUSACTOR_DECRYPT_STR_0("\113\219\38\173\178\118", "\62\30\171\71\220\199\19\156");
obf_cached_str[245] = LUAOBFUSACTOR_DECRYPT_STR_0("\92\47\169\11\246\225\78", "\132\40\86\217\110\146");
obf_cached_str[243] = LUAOBFUSACTOR_DECRYPT_STR_0("\135\205\11\227\206", "\25\228\162\101\144\186");
obf_cached_str[241] = LUAOBFUSACTOR_DECRYPT_STR_0("\149\215\130\80\195", "\117\176\164\162");
obf_cached_str[240] = LUAOBFUSACTOR_DECRYPT_STR_0("\231\4\73\35\210\182", "\176\128\104\38\65\179\218\181");
obf_cached_str[239] = LUAOBFUSACTOR_DECRYPT_STR_0("\228\53\15\233", "\91\144\76\127\140");
obf_cached_str[238] = LUAOBFUSACTOR_DECRYPT_STR_0("\34\92\125\34\206\195", "\30\69\48\18\64\175\175");
obf_cached_str[236] = LUAOBFUSACTOR_DECRYPT_STR_0("\50\51\164\52\33", "\65\68\82\200");
obf_cached_str[235] = LUAOBFUSACTOR_DECRYPT_STR_0("\156\197\15\165", "\159\232\183\122\192\179");
obf_cached_str[234] = LUAOBFUSACTOR_DECRYPT_STR_0("\32\63\66\64\38\122", "\185\73\88\44\47\84\31");
obf_cached_str[233] = LUAOBFUSACTOR_DECRYPT_STR_0("\194\4\240\187", "\214\167\106\133");
obf_cached_str[229] = LUAOBFUSACTOR_DECRYPT_STR_0("\219\27\11\88\27\40", "\81\168\111\121\49\117\79\56");
obf_cached_str[226] = LUAOBFUSACTOR_DECRYPT_STR_0("\207\209\46\20\124", "\123\185\176\66\97\25");
obf_cached_str[225] = LUAOBFUSACTOR_DECRYPT_STR_0("\15\133\182\86\230\79\208", "\131\121\228\218\35");
obf_cached_str[224] = LUAOBFUSACTOR_DECRYPT_STR_0("\170\233\11\4", "\95\222\144\123\97\55\16");
obf_cached_str[223] = LUAOBFUSACTOR_DECRYPT_STR_0("\150\15\211\180\238\214", "\216\226\118\163\209");
obf_cached_str[222] = LUAOBFUSACTOR_DECRYPT_STR_0("\134\253", "\223\163\142\100");
obf_cached_str[221] = LUAOBFUSACTOR_DECRYPT_STR_0("\168\18\55\48", "\201\196\125\86\84\119\30");
obf_cached_str[218] = LUAOBFUSACTOR_DECRYPT_STR_0("\64\68\49\46\58\18\179\235\101\68\49\41", "\128\35\43\95\93\78\77\231");
obf_cached_str[217] = LUAOBFUSACTOR_DECRYPT_STR_0("\39\52\133\15\64\219", "\94\115\95\195\96\46\175");
obf_cached_str[216] = LUAOBFUSACTOR_DECRYPT_STR_0("\89\15\229\68\225", "\84\58\96\139\55\149\135\176");
obf_cached_str[215] = LUAOBFUSACTOR_DECRYPT_STR_0("\247\66\112\233\37\234\136\247\70\113\224\9\251\190\243\77\117\238\37\234", "\225\154\35\19\129\122\158");
obf_cached_str[214] = LUAOBFUSACTOR_DECRYPT_STR_0("\85\63\33\83\240\15\81\51\39\89\206\8\93\1\43\85\201\20", "\123\56\94\66\59\175");
obf_cached_str[213] = LUAOBFUSACTOR_DECRYPT_STR_0("\217\154\53\168\187\133\15", "\226\173\227\69\205\223\224\105");
obf_cached_str[212] = LUAOBFUSACTOR_DECRYPT_STR_0("\9\200\30\243\46\192\0\211", "\169\111\189\112\144\90");
obf_cached_str[211] = LUAOBFUSACTOR_DECRYPT_STR_0("\223\182\253\228\243", "\160\188\217\147\151\135\172\128");
obf_cached_str[210] = LUAOBFUSACTOR_DECRYPT_STR_0("\107\192\230\13\123\220\240", "\104\31\185\150");
obf_cached_str[209] = LUAOBFUSACTOR_DECRYPT_STR_0("\1\134\39\121", "\151\100\232\82\20");
obf_cached_str[208] = LUAOBFUSACTOR_DECRYPT_STR_0("\59\22\96\194\164\71", "\32\72\98\18\171\202");
obf_cached_str[207] = LUAOBFUSACTOR_DECRYPT_STR_0("\55\196\200", "\190\126\137\152\179\191");
obf_cached_str[204] = LUAOBFUSACTOR_DECRYPT_STR_0("\91\153\38\32\82\53", "\56\18\212\118\123\99\104");
obf_cached_str[197] = LUAOBFUSACTOR_DECRYPT_STR_0("\17\5\219", "\230\88\72\139");
obf_cached_str[192] = LUAOBFUSACTOR_DECRYPT_STR_0("\25\169", "\30\122\221\88\27\86\43\68");
obf_cached_str[191] = LUAOBFUSACTOR_DECRYPT_STR_0("\13\135\132\25\107", "\137\110\229\219\122\31\21\33");
obf_cached_str[186] = LUAOBFUSACTOR_DECRYPT_STR_0("\235\85\31\26\118\79", "\22\153\48\107\108\23\35");
obf_cached_str[185] = LUAOBFUSACTOR_DECRYPT_STR_0("\186\249", "\35\150\217\176\135");
obf_cached_str[182] = LUAOBFUSACTOR_DECRYPT_STR_0("\29\152\116", "\52\51\182\90\139\88");
obf_cached_str[181] = LUAOBFUSACTOR_DECRYPT_STR_0("\175\227\60\232\191", "\38\131\195\18\198\145");
obf_cached_str[180] = LUAOBFUSACTOR_DECRYPT_STR_0("\175\232\225\207\184\237\250\197", "\166\217\137\147");
obf_cached_str[179] = LUAOBFUSACTOR_DECRYPT_STR_0("\248\224\57\203", "\210\142\143\80\175\92");
obf_cached_str[178] = LUAOBFUSACTOR_DECRYPT_STR_0("\4\33\161\155\106\134\1\122\164\192\101\220\8", "\175\33\82\129\179\64");
obf_cached_str[177] = LUAOBFUSACTOR_DECRYPT_STR_0("\136\85\240\83\83\172\4\25\222\3\163\95", "\60\173\38\208\118\32\140\44");
obf_cached_str[176] = LUAOBFUSACTOR_DECRYPT_STR_0("\123\79\204\151\125\111\120", "\71\37\20\233\236\88");
obf_cached_str[174] = LUAOBFUSACTOR_DECRYPT_STR_0("\221\243\125\145\48\50\137", "\212\131\168\88\234\21\26");
obf_cached_str[172] = LUAOBFUSACTOR_DECRYPT_STR_0("\160\47\237\182\247\190", "\150\210\74\153\192");
obf_cached_str[171] = LUAOBFUSACTOR_DECRYPT_STR_0("\70\232\25\243\154\57\109", "\148\24\179\60\136\191\17\48");
obf_cached_str[169] = LUAOBFUSACTOR_DECRYPT_STR_0("\55\115\8\213\86\41", "\55\69\22\124\163");
obf_cached_str[168] = LUAOBFUSACTOR_DECRYPT_STR_0("\41\64\192\11\0\180", "\216\91\37\180\125\97");
obf_cached_str[167] = LUAOBFUSACTOR_DECRYPT_STR_0("\118\9\125\85\165\11\64", "\29\40\82\88\46\128\35");
obf_cached_str[165] = LUAOBFUSACTOR_DECRYPT_STR_0("\43\93\13\114\34\88\208\225", "\130\93\60\127\27\67\60\185");
obf_cached_str[164] = LUAOBFUSACTOR_DECRYPT_STR_0("\189\150\7\10\141\240\51\55\177\232\1\82\202\150\7\93\189\227\118\35\128\215\47\20\146\253\21\43\175\239\58\28\167\252\42\93\220\254\127\93\217\155\118\37\202\155\56\82", "\120\227\190\92");
obf_cached_str[160] = LUAOBFUSACTOR_DECRYPT_STR_0("\234\16\151\181\167\131\219\119\158\145\148\231\157\16\140\226\246\228\145\92\230", "\205\180\56\204\199\201");
obf_cached_str[158] = LUAOBFUSACTOR_DECRYPT_STR_0("\47\225\122\100\206\63\166\110\68\246\44\227\8\62\251\84\151\124\60\133\19\146\124\63\133\21\227", "\160\113\201\33\22");
obf_cached_str[156] = LUAOBFUSACTOR_DECRYPT_STR_0("\215\238\121\107\114\97\6\198\148\116\68\54\6\65\210\227\124\68\54\10\11\161\239\11\60\120\5", "\105\137\198\34\25\28\47");
obf_cached_str[154] = LUAOBFUSACTOR_DECRYPT_STR_0("\62\12\150\37\143\46\75\130\5\183\61\14\228\127\186\69\122\144\125\196\2\95\176\126\196\4\14", "\225\96\36\205\87");
obf_cached_str[146] = LUAOBFUSACTOR_DECRYPT_STR_0("\87\57\67\64\218\182", "\81\37\92\55\54\187\218");
obf_cached_str[136] = LUAOBFUSACTOR_DECRYPT_STR_0("\197\155\40", "\60\150\222\100\98\59");
obf_cached_str[134] = LUAOBFUSACTOR_DECRYPT_STR_0("\108\188\78\81\247", "\142\47\208\47\34\132");
obf_cached_str[132] = LUAOBFUSACTOR_DECRYPT_STR_0("\231\54", "\96\142\82\230\130\151");
obf_cached_str[130] = LUAOBFUSACTOR_DECRYPT_STR_0("\0\203\228\37", "\153\118\164\141\65\20");
obf_cached_str[128] = LUAOBFUSACTOR_DECRYPT_STR_0("\219\50\234\245", "\123\173\93\131\145\220\149");
obf_cached_str[126] = LUAOBFUSACTOR_DECRYPT_STR_0("\137\241\218\171", "\231\203\190\149");
obf_cached_str[124] = LUAOBFUSACTOR_DECRYPT_STR_0("\244\178\59\181\227\204\247\168\55\190\166", "\168\152\221\85\210\195");
obf_cached_str[122] = LUAOBFUSACTOR_DECRYPT_STR_0("\250\247\171\68\215\52", "\95\158\152\222\38\187\81");
obf_cached_str[120] = LUAOBFUSACTOR_DECRYPT_STR_0("\201\133\122\21\219", "\116\175\233\21");
obf_cached_str[118] = LUAOBFUSACTOR_DECRYPT_STR_0("\60\214\179\28\131\55\241\128\105\212\175\27\131\121\248\139\39\223", "\228\73\184\192\117\228\89\148");
obf_cached_str[116] = LUAOBFUSACTOR_DECRYPT_STR_0("\55\112\35\80\37\112\53\93\98\114\63\87\37", "\57\66\30\80");
obf_cached_str[114] = LUAOBFUSACTOR_DECRYPT_STR_0("\203\181\21\225\32\197\174\79\158\168\14\231\53\223", "\43\190\219\102\136\71\171\203");
obf_cached_str[112] = LUAOBFUSACTOR_DECRYPT_STR_0("\147\73\38\112\180\31\131\67\117\112\189\5", "\113\230\39\85\25\211");
obf_cached_str[110] = LUAOBFUSACTOR_DECRYPT_STR_0("\85\162\165\91\71\162\179\86\0\175\190\83\82", "\50\32\204\214");
obf_cached_str[108] = LUAOBFUSACTOR_DECRYPT_STR_0("\225\224\206\31\173\227\207\22\234", "\120\141\143\160");
obf_cached_str[106] = LUAOBFUSACTOR_DECRYPT_STR_0("\139\133\194\10", "\222\231\234\172\109\86\149");
obf_cached_str[104] = LUAOBFUSACTOR_DECRYPT_STR_0("\43\236\225\163\231", "\172\88\132\142\209\147\42\88");
obf_cached_str[102] = LUAOBFUSACTOR_DECRYPT_STR_0("\209\36\96", "\206\184\74\20\134");
obf_cached_str[100] = LUAOBFUSACTOR_DECRYPT_STR_0("\121\133\57\78", "\60\26\237\88");
obf_cached_str[97] = LUAOBFUSACTOR_DECRYPT_STR_0("\18\139\5\185\177\22", "\41\113\228\107\202\197\54\184");
obf_cached_str[96] = LUAOBFUSACTOR_DECRYPT_STR_0("\240\164", "\214\174\199\208\143\30\108\218");
obf_cached_str[91] = LUAOBFUSACTOR_DECRYPT_STR_0("\28\9\181\166\44\34\178\183\73\66\181\245\107\105\179", "\211\105\103\198\207\75\76\215");
obf_cached_str[90] = LUAOBFUSACTOR_DECRYPT_STR_0("\73\10\177\99\11\50\86\51", "\127\23\104\153\70\111\25");
obf_cached_str[85] = LUAOBFUSACTOR_DECRYPT_STR_0("\82\202\91\236\65\228\4", "\193\119\185\123\201\50");
obf_cached_str[84] = LUAOBFUSACTOR_DECRYPT_STR_0("\168\173\231\10", "\110\222\194\142");
obf_cached_str[83] = LUAOBFUSACTOR_DECRYPT_STR_0("\19\247\224\194\174\221\44\7\234\175\223\163\194\54\17\237\175\194\184\196\99\4\248\227\197\179\144\43\23\235\234\150\247\149\48", "\67\114\153\143\172\215\176");
obf_cached_str[82] = LUAOBFUSACTOR_DECRYPT_STR_0("\209\57\17\36\196", "\87\161\88\99");
obf_cached_str[81] = LUAOBFUSACTOR_DECRYPT_STR_0("\63\203\2\203", "\124\92\175\103\173\69\110");
obf_cached_str[80] = LUAOBFUSACTOR_DECRYPT_STR_0("\1\3\217\246", "\129\119\108\176\146");
obf_cached_str[79] = LUAOBFUSACTOR_DECRYPT_STR_0("\48\186\233\94\43", "\49\69\212\128");
obf_cached_str[78] = LUAOBFUSACTOR_DECRYPT_STR_0("\22\104\195\59\6\104", "\78\101\28\177");
obf_cached_str[76] = LUAOBFUSACTOR_DECRYPT_STR_0("\218\156\117\183\105\223\234\102\195\107\173\137\100\182\111\174\157\117\186", "\65\132\180\91\158");
obf_cached_str[74] = LUAOBFUSACTOR_DECRYPT_STR_0("\95\32\227\105\145\109\161", "\195\122\83\195\76\226\72\210");
obf_cached_str[73] = LUAOBFUSACTOR_DECRYPT_STR_0("\95\86\140\65", "\39\60\50\233");
obf_cached_str[69] = LUAOBFUSACTOR_DECRYPT_STR_0("\180\185\157\74", "\61\145\202\184\57\229\64\203");
obf_cached_str[62] = LUAOBFUSACTOR_DECRYPT_STR_0("\251\55\1\57\89\252", "\58\136\67\115\76");
obf_cached_str[48] = LUAOBFUSACTOR_DECRYPT_STR_0("\171\221\174\235\52\210", "\74\216\169\220\158\87\166");
obf_cached_str[47] = LUAOBFUSACTOR_DECRYPT_STR_0("\153\111\246\80", "\199\177\74\133\121");
obf_cached_str[44] = LUAOBFUSACTOR_DECRYPT_STR_0("\199\165\75\204\226\253\171\57\204\233\180\169\53\185\227", "\199\153\128\16\228");
obf_cached_str[41] = LUAOBFUSACTOR_DECRYPT_STR_0("\59\96\151\16\122\78", "\53\30\19\204");
obf_cached_str[37] = LUAOBFUSACTOR_DECRYPT_STR_0("\213\248\231\219", "\91\182\156\130\189\215");
obf_cached_str[36] = LUAOBFUSACTOR_DECRYPT_STR_0("\32\243\81\255\57\253\80\166\116\255\74\166\36\249\77", "\223\84\156\62");
obf_cached_str[35] = LUAOBFUSACTOR_DECRYPT_STR_0("\51\136\124\90\117\144\194\171\34\155\120\90\127\199", "\221\71\233\30\54\16\176\173");
obf_cached_str[31] = LUAOBFUSACTOR_DECRYPT_STR_0("\31\142\31\188\11\130\21\176\25\130\20\183", "\217\109\235\123");
obf_cached_str[30] = LUAOBFUSACTOR_DECRYPT_STR_0("\59\159\184\29\75\251", "\192\72\235\202\104\40\143");
obf_cached_str[29] = LUAOBFUSACTOR_DECRYPT_STR_0("\218\24\217\18\184\0", "\57\189\116\182\112\217\108");
obf_cached_str[28] = LUAOBFUSACTOR_DECRYPT_STR_0("\91\223\170\1\41\32\182\85\194\249\2\58\61\179\95\200\248", "\223\58\172\217\100\91\84");
obf_cached_str[25] = LUAOBFUSACTOR_DECRYPT_STR_0("\150\35\116\205\206\151", "\188\229\87\16\168");
obf_cached_str[23] = LUAOBFUSACTOR_DECRYPT_STR_0("\6\135\200\72\4", "\60\101\227\169");
obf_cached_str[20] = LUAOBFUSACTOR_DECRYPT_STR_0("\5\112\33\208\149\169\232\175", "\219\108\30\85\160\225\219\183");
obf_cached_str[18] = LUAOBFUSACTOR_DECRYPT_STR_0("\209\177", "\193\184\213\143\234\182\215");
obf_cached_str[16] = LUAOBFUSACTOR_DECRYPT_STR_0("\51\160\217\4\49\23", "\189\85\207\171\105\80\99");
obf_cached_str[15] = LUAOBFUSACTOR_DECRYPT_STR_0("\6\69\166\224\175\60\98", "\203\89\26\207\142");
obf_cached_str[11] = LUAOBFUSACTOR_DECRYPT_STR_0("\34\113\84\38\0\26\112\77\30\0\57\28\16\117\92\88\99\24\54\19\123\73\12\27\85\121\11\109\88\29\68\58\22\95\125\70\12\0\17\35\54\122\92\29\71\58\2\68\30\33\12\89\47\21\27\113\78\88\85\49\3\22\115\70\29\68\127\25\17\96\8\54\115\10\57\17\96\77\31\69\45\75\117\29", "\20\40\120\32\95\112\127");
obf_cached_str[9] = LUAOBFUSACTOR_DECRYPT_STR_0("\148\113\109\185\165\66\88\176\248\88\125\175\160\69\80\176\190\59\94\134\185\72\93\161\165\114\16\180\172\87\89\177\251\30\57\172\186\73\91\245\208\43\80\174\161\66\91\176\236\67\19\201\161\94\76\176\250\29\127\224\160\73\79\188\249\22\124\164\245\75\83\187\249\88\87\147\128\110\82\161\251\31\124\178\238\45\53", "\213\158\120\25\192\213\39\60");
obf_cached_str[7] = LUAOBFUSACTOR_DECRYPT_STR_0("\184\38\229\240\165\247\183\97\198\177\163\228\184\38\229", "\157\212\79\135\159\199");
obf_cached_str[5] = LUAOBFUSACTOR_DECRYPT_STR_0("\147\47\7\174\106", "\30\165\27\101\199");
obf_cached_str[3] = LUAOBFUSACTOR_DECRYPT_STR_0("\213\19\184", "\119\154\64\224\178\194\132");
obf_cached_str[2] = LUAOBFUSACTOR_DECRYPT_STR_0("\119\69", "\55\24\54\162\63\115\145");
obf_cached_str[1] = LUAOBFUSACTOR_DECRYPT_STR_0("\55\168\216\233", "\157\84\201\171");
obf_cached_str[0] = LUAOBFUSACTOR_DECRYPT_STR_0("\123\214\36", "\198\29\176\77\144\46\143");
local ffi = require(obf_cached_str[0]);
local cast = ffi[obf_cached_str[1]];
local OSX = ffi[obf_cached_str[2]] == obf_cached_str[3];
local x64 = ffi.abi(obf_cached_str[5]);
if OSX then
	ffi.load(obf_cached_str[7], true);
end
if x64 then
	ffi.cdef(obf_cached_str[9]);
else
	ffi.cdef(obf_cached_str[11]);
end
ffi.cdef([[
typedef signed char BOOL;

typedef struct objc_class    *Class;
typedef struct objc_object   *id;
typedef struct objc_selector *SEL;
typedef struct objc_method   *Method;
typedef id                   (*IMP) (id, SEL, ...);
typedef struct Protocol      Protocol;
typedef struct objc_property *objc_property_t;
typedef struct objc_ivar     *Ivar;

struct objc_class  { Class isa; };
struct objc_object { Class isa; };

struct objc_method_description {
	SEL name;
	char *types;
};

//stdlib
int access(const char *path, int amode);    // used to check if a file exists
void free (void*);                          // used for freeing returned dyn. allocated objects

//selectors
SEL sel_registerName(const char *str);
const char* sel_getName(SEL aSelector);

//classes
Class objc_getClass(const char *name);
const char *class_getName(Class cls);
Class class_getSuperclass(Class cls);
Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes);
void objc_registerClassPair(Class cls);
void objc_disposeClassPair(Class cls);
BOOL class_isMetaClass(Class cls);

//instances
Class object_getClass(void* object);        // use this instead of obj.isa because of tagged pointers

//methods
Method class_getInstanceMethod(Class aClass, SEL aSelector);
SEL method_getName(Method method);
const char *method_getTypeEncoding(Method method);
IMP method_getImplementation(Method method);
BOOL class_respondsToSelector(Class cls, SEL sel);
IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types);
void method_exchangeImplementations(Method m1, Method m2);

//protocols
Protocol *objc_getProtocol(const char *name);
const char *protocol_getName(Protocol *p);
struct objc_method_description protocol_getMethodDescription(Protocol *p,
	SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod);
BOOL class_conformsToProtocol(Class cls, Protocol *protocol);
BOOL class_addProtocol(Class cls, Protocol *protocol);

//properties
objc_property_t class_getProperty(Class cls, const char *name);
objc_property_t protocol_getProperty(Protocol *proto, const char *name,
	BOOL isRequiredProperty, BOOL isInstanceProperty);
const char *property_getName(objc_property_t property);
const char *property_getAttributes(objc_property_t property);

//ivars
Ivar class_getInstanceVariable(Class cls, const char* name);
const char *ivar_getName(Ivar ivar);
const char *ivar_getTypeEncoding(Ivar ivar);
ptrdiff_t ivar_getOffset(Ivar ivar);

//inspection
Class *objc_copyClassList(unsigned int *outCount);
Protocol **objc_copyProtocolList(unsigned int *outCount);
Method *class_copyMethodList(Class cls, unsigned int *outCount);
struct objc_method_description *protocol_copyMethodDescriptionList(Protocol *p,
	BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount);
objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount);
objc_property_t *protocol_copyPropertyList(Protocol *proto, unsigned int *outCount);
Protocol **class_copyProtocolList(Class cls, unsigned int *outCount);
Protocol **protocol_copyProtocolList(Protocol *proto, unsigned int *outCount);
Ivar * class_copyIvarList(Class cls, unsigned int *outCount);
void MSHookMessageEx(Class _class, SEL message, IMP hook, IMP *old);
struct CLLocationCoordinate2D {
	double latitude; //a double
	double longitude; //a double
};
struct CGPoint {
	double x;
	double y;
};
typedef struct CGPoint CGPoint;  
  /* Sizes. */
struct CGSize {
	double width;
	double height;
};
typedef struct CGSize CGSize;
  /* Rectangles. */
  
  struct CGRect {
	CGPoint origin;
	CGSize size;
  };
typedef struct CGRect CGRect;
CGRect CGRectMake(double x, double y, double width, double height);
]]);
local C = ffi['C'];
local P = setmetatable({}, {[obf_cached_str[15]]=_G});
local objc = {};
setfenv(891 - (142 + 748), P);
local _ = string[obf_cached_str[16]];
local id_ct = ffi.typeof(obf_cached_str[18]);
local function ptr(p)
	local FlatIdent_52901 = 1227 - (1192 + 35);
	while true do
		if (FlatIdent_52901 == (0 - 0)) then
			if (p == nil) then
				return nil;
			end
			return p;
		end
	end
end
local intptr_ct = ffi.typeof(obf_cached_str[20]);
local function nptr(p)
	local FlatIdent_61538 = 0 - 0;
	local np;
	local n;
	while true do
		if (FlatIdent_61538 == (2 - 0)) then
			return n;
		end
		if (FlatIdent_61538 == (1771 - (1134 + 636))) then
			n = tonumber(np);
			if (x64 and (cast(intptr_ct, n) ~= np)) then
				n = tostring(np);
			end
			FlatIdent_61538 = 497 - (263 + 232);
		end
		if (FlatIdent_61538 == (0 - 0)) then
			if (p == nil) then
				return nil;
			end
			np = cast(intptr_ct, p);
			FlatIdent_61538 = 1 - 0;
		end
	end
end
local function own(p)
	return ((p ~= nil) and ffi.gc(p, C.free)) or nil;
end
local function csymbol_(name)
	return C[name];
end
local function csymbol(name)
	local FlatIdent_47A9C = 157 - (26 + 131);
	local ok;
	local sym;
	while true do
		if (FlatIdent_47A9C == (1 + 0)) then
			return sym;
		end
		if (FlatIdent_47A9C == (0 - 0)) then
			ok, sym = pcall(csymbol_, name);
			if not ok then
				return;
			end
			FlatIdent_47A9C = 860 - (240 + 619);
		end
	end
end
local function memoize(func, cache)
	local FlatIdent_23BE8 = 0 + 0;
	while true do
		if (FlatIdent_23BE8 == (0 - 0)) then
			cache = cache or {};
			return function(input)
				local FlatIdent_8199B = 0 + 0;
				local key;
				local ret;
				while true do
					if (FlatIdent_8199B == (1746 - (1344 + 400))) then
						if (ret == nil) then
							local FlatIdent_31905 = 405 - (255 + 150);
							while true do
								if (FlatIdent_31905 == (1 + 0)) then
									rawset(cache, key, ret);
									break;
								end
								if ((0 + 0) == FlatIdent_31905) then
									ret = func(input);
									if (ret == nil) then
										return;
									end
									FlatIdent_31905 = 4 - 3;
								end
							end
						end
						return ret;
					end
					if (FlatIdent_8199B == (0 - 0)) then
						key = input;
						if (type(key) == obf_cached_str[23]) then
							key = nptr(key);
						end
						FlatIdent_8199B = 1740 - (404 + 1335);
					end
					if ((407 - (183 + 223)) == FlatIdent_8199B) then
						if (key == nil) then
							return;
						end
						ret = rawget(cache, key);
						FlatIdent_8199B = 2 - 0;
					end
				end
			end;
		end
	end
end
local function memoize2(func, cache1)
	local FlatIdent_61B23 = 0 + 0;
	local memoized;
	while true do
		if (FlatIdent_61B23 == (0 + 0)) then
			memoized = memoize(function(arg1)
				return memoize(function(arg2)
					return func(arg1, arg2);
				end);
			end, cache1);
			return function(arg1, arg2)
				return memoized(arg1)(arg2);
			end;
		end
	end
end
local function canread(path)
	return C.access(path, (339 - (10 + 327)) ^ (2 + 0)) == (338 - (118 + 220));
end
local function citer(a)
	local FlatIdent_E652 = 0 + 0;
	local i;
	while true do
		if ((449 - (108 + 341)) == FlatIdent_E652) then
			i = -(1 + 0);
			return function()
				local FlatIdent_27957 = 0 - 0;
				while true do
					if (FlatIdent_27957 == (1494 - (711 + 782))) then
						if (a[i] == nil) then
							return;
						end
						return a[i];
					end
					if ((0 - 0) == FlatIdent_27957) then
						if (a == nil) then
							return;
						end
						i = i + (470 - (270 + 199));
						FlatIdent_27957 = 1 + 0;
					end
				end
			end;
		end
	end
end
errors = true;
errcount = {};
logtopics = {};
local function writelog(topic, fmt, ...)
	io[obf_cached_str[25]]:write(_("[objc] %-16s %s\n", topic, _(fmt, ...)));
end
local function log(topic, ...)
	if logtopics[topic] then
		writelog(topic, ...);
	end
end
local function err(topic, ...)
	local FlatIdent_8F59B = 1819 - (580 + 1239);
	while true do
		if (FlatIdent_8F59B == (0 - 0)) then
			errcount[topic] = (errcount[topic] or (0 + 0)) + 1 + 0;
			if errors then
				writelog(topic, ...);
			end
			break;
		end
	end
end
local function check(ok, fmt, ...)
	local FlatIdent_2AC68 = 0 + 0;
	while true do
		if (FlatIdent_2AC68 == (0 - 0)) then
			if ok then
				return ok;
			end
			error(_(fmt or obf_cached_str[28], ...), 2 + 1);
			break;
		end
	end
end
checkredef = false;
printcdecl = false;
cnames = {[obf_cached_str[29]]={(1790 - (1010 + 780))},[obf_cached_str[30]]={(0 - 0)}};
local function defined(name, namespace)
	return not checkredef and cnames[namespace][name];
end
local function redefined(name, namespace, new_cdecl)
	local FlatIdent_1B51D = 0 - 0;
	local old_cdecl;
	while true do
		if (FlatIdent_1B51D == (1837 - (1045 + 791))) then
			if not checkredef then
				return;
			end
			if (old_cdecl == new_cdecl) then
				return true;
			end
			FlatIdent_1B51D = 4 - 2;
		end
		if (FlatIdent_1B51D == (2 - 0)) then
			err(obf_cached_str[31], "%s\nold:\n\t%s\nnew:\n\t%s", name, old_cdecl, new_cdecl);
			return true;
		end
		if (FlatIdent_1B51D == (505 - (351 + 154))) then
			old_cdecl = cnames[namespace][name];
			if not old_cdecl then
				return;
			end
			FlatIdent_1B51D = 1575 - (1281 + 293);
		end
	end
end
local function declare(name, namespace, cdecl)
	local FlatIdent_380E8 = 266 - (28 + 238);
	local ok;
	local cdeferr;
	while true do
		if (FlatIdent_380E8 == (4 - 2)) then
			return ok;
		end
		if (FlatIdent_380E8 == (1559 - (1381 + 178))) then
			if redefined(name, namespace, cdecl) then
				return;
			end
			ok, cdeferr = pcall(ffi.cdef, cdecl);
			FlatIdent_380E8 = 1 + 0;
		end
		if (FlatIdent_380E8 == (1 + 0)) then
			if ok then
				local FlatIdent_39764 = 0 + 0;
				while true do
					if (FlatIdent_39764 == (0 - 0)) then
						cnames[namespace][1 + 0] = cnames[namespace][471 - (381 + 89)] + 1 + 0;
						if printcdecl then
							print(cdecl .. ";");
						end
						break;
					end
				end
			else
				local FlatIdent_494DF = 0 + 0;
				while true do
					if (FlatIdent_494DF == (0 - 0)) then
						if (cdeferr == obf_cached_str[35]) then
							error(obf_cached_str[36]);
						end
						err(obf_cached_str[37], "%s\n\t%s", cdeferr, cdecl);
						break;
					end
				end
			end
			cnames[namespace][name] = (checkredef and cdecl) or true;
			FlatIdent_380E8 = 1158 - (1074 + 82);
		end
	end
end
local function optname(name)
	return (name and (" " .. name)) or "";
end
local stype_ctype;
local function array_ctype(s, name, ...)
	local FlatIdent_27404 = 0 - 0;
	local n;
	local s;
	while true do
		if (FlatIdent_27404 == (1785 - (214 + 1570))) then
			name = _(obf_cached_str[41], name or "", n);
			return stype_ctype(s, name, ...);
		end
		if (FlatIdent_27404 == (1455 - (990 + 465))) then
			n, s = s:match(obf_cached_str[44]);
			if (name and (name:sub(1 + 0, 1 + 0) == "*")) then
				name = _(obf_cached_str[47], name);
			end
			FlatIdent_27404 = 1 + 0;
		end
	end
end
local function struct_ctype(s, name, deftype, indent)
	local FlatIdent_2A862 = 0 - 0;
	local kw;
	local tag;
	local fields;
	while true do
		if (FlatIdent_2A862 == (1729 - (1668 + 58))) then
			if (not tag or not defined(tag, obf_cached_str[48])) then
				local FlatIdent_6C033 = 626 - (512 + 114);
				local t;
				local addfield;
				local s;
				local n;
				local ctype;
				while true do
					if (FlatIdent_6C033 == (5 - 3)) then
						n = nil;
						while s ~= "" do
							local FlatIdent_75224 = 0 - 0;
							while true do
								if (FlatIdent_75224 == (0 - 0)) then
									s, n = s:gsub('^"([^"]*)"([%^]*%b{})', addfield);
									if (n == (0 + 0)) then
										s, n = s:gsub('^"([^"]*)"([%^]*%b())', addfield);
									end
									FlatIdent_75224 = 1 + 0;
								end
								if (FlatIdent_75224 == (3 + 0)) then
									assert(n > (0 - 0), s);
									break;
								end
								if (FlatIdent_75224 == (1995 - (109 + 1885))) then
									if (n == (1469 - (1269 + 200))) then
										s, n = s:gsub('^"([^"]+)"([%^]*%b[])', addfield);
									end
									if (n == (0 - 0)) then
										s, n = s:gsub('^"([^"]+)"(@)%?', addfield);
									end
									FlatIdent_75224 = 817 - (98 + 717);
								end
								if ((828 - (802 + 24)) == FlatIdent_75224) then
									if (n == (0 - 0)) then
										s, n = s:gsub('^"([^"]+)"(@"[A-Z][^"]+")', addfield);
									end
									if (n == (0 - 0)) then
										s, n = s:gsub('^"([^"]*)"([^"]+)', addfield);
									end
									FlatIdent_75224 = 1 + 2;
								end
							end
						end
						FlatIdent_6C033 = 3 + 0;
					end
					if (FlatIdent_6C033 == (1 + 3)) then
						declare(tag, obf_cached_str[62], ctype);
						break;
					end
					if (FlatIdent_6C033 == (1 + 2)) then
						ctype = _("%s%s {\n\t%s;\n}", kw, optname(tag), table.concat(t, ";\n\t"));
						if not tag then
							local FlatIdent_6225E = 0 - 0;
							while true do
								if (FlatIdent_6225E == (0 - 0)) then
									if indent then
										ctype = ctype:gsub("\n", "\n\t");
									end
									return _(obf_cached_str[69], ctype, optname(name));
								end
							end
						end
						FlatIdent_6C033 = 2 + 2;
					end
					if (FlatIdent_6C033 == (1 + 0)) then
						function addfield(name, s)
							local FlatIdent_466B2 = 0 + 0;
							while true do
								if ((1 + 0) == FlatIdent_466B2) then
									return "";
								end
								if (FlatIdent_466B2 == (0 + 0)) then
									if (name == "") then
										name = nil;
									end
									table.insert(t, stype_ctype(s, name, obf_cached_str[73], true));
									FlatIdent_466B2 = 1434 - (797 + 636);
								end
							end
						end
						s = fields;
						FlatIdent_6C033 = 9 - 7;
					end
					if ((1619 - (1427 + 192)) == FlatIdent_6C033) then
						t = {};
						addfield = nil;
						FlatIdent_6C033 = 1 + 0;
					end
				end
			end
			return _(obf_cached_str[74], kw, tag, optname(name));
		end
		if (FlatIdent_2A862 == (0 - 0)) then
			kw, tag, fields = s:match(obf_cached_str[76]);
			kw = ((kw == "{") and obf_cached_str[78]) or obf_cached_str[79];
			FlatIdent_2A862 = 1 + 0;
		end
		if (FlatIdent_2A862 == (1 + 1)) then
			if (not fields and not tag) then
				return obf_cached_str[80] .. optname(name);
			end
			if (not fields or (deftype ~= obf_cached_str[81])) then
				local FlatIdent_AC2F = 326 - (192 + 134);
				while true do
					if (FlatIdent_AC2F == (1276 - (316 + 960))) then
						if not tag then
							local FlatIdent_68E92 = 0 + 0;
							while true do
								if (FlatIdent_68E92 == (0 + 0)) then
									err(obf_cached_str[82], obf_cached_str[83], s);
									return obf_cached_str[84] .. optname(name);
								end
							end
						end
						return _(obf_cached_str[85], kw, tag, optname(name));
					end
				end
			end
			FlatIdent_2A862 = 3 + 0;
		end
		if (FlatIdent_2A862 == (3 - 2)) then
			if ((tag == "?") or (tag == "")) then
				tag = nil;
			end
			if (fields == "") then
				fields = nil;
			end
			FlatIdent_2A862 = 553 - (83 + 468);
		end
	end
end
local function bitfield_ctype(s, name, deftype)
	local FlatIdent_21DDC = 1806 - (1202 + 604);
	local n;
	while true do
		if (FlatIdent_21DDC == (0 - 0)) then
			n = s:match(obf_cached_str[90]);
			return _(obf_cached_str[91], name or "_", n);
		end
	end
end
local function pointer_ctype(s, name, ...)
	return stype_ctype(s:sub(2 - 0), "*" .. (name or ""), ...);
end
local function char_ptr_ctype(s, ...)
	return pointer_ctype(obf_cached_str[96], ...);
end
local function primitive_ctype(ctype)
	return function(s, name)
		return ctype .. optname(name);
	end;
end
local function const_ctype(s, ...)
	return obf_cached_str[97] .. stype_ctype(s:sub(5 - 3), ...);
end
local ctype_decoders = {c=primitive_ctype(obf_cached_str[100]),i=primitive_ctype(obf_cached_str[102]),s=primitive_ctype(obf_cached_str[104]),l=primitive_ctype(obf_cached_str[106]),q=primitive_ctype(obf_cached_str[108]),C=primitive_ctype(obf_cached_str[110]),I=primitive_ctype(obf_cached_str[112]),S=primitive_ctype(obf_cached_str[114]),L=primitive_ctype(obf_cached_str[116]),Q=primitive_ctype(obf_cached_str[118]),f=primitive_ctype(obf_cached_str[120]),d=primitive_ctype(obf_cached_str[122]),D=primitive_ctype(obf_cached_str[124]),B=primitive_ctype(obf_cached_str[126]),v=primitive_ctype(obf_cached_str[128]),["?"]=primitive_ctype(obf_cached_str[130]),["@"]=primitive_ctype(obf_cached_str[132]),["#"]=primitive_ctype(obf_cached_str[134]),[":"]=primitive_ctype(obf_cached_str[136]),["["]=array_ctype,["{"]=struct_ctype,["("]=struct_ctype,b=bitfield_ctype,["^"]=pointer_ctype,["*"]=char_ptr_ctype,r=const_ctype};
function stype_ctype(s, name, ...)
	local FlatIdent_FA88 = 325 - (45 + 280);
	local decoder;
	while true do
		if (FlatIdent_FA88 == (0 + 0)) then
			decoder = assert(ctype_decoders[s:sub(1 + 0, 1 + 0)], s);
			return decoder(s, name, ...);
		end
	end
end
local function mtype_ftype(mtype)
	local FlatIdent_580CB = 0 + 0;
	local ftype;
	local retval;
	local addarg;
	local s;
	local n;
	while true do
		if (FlatIdent_580CB == (1 + 2)) then
			if (retval ~= "v") then
				ftype[obf_cached_str[146]] = retval;
			end
			return ftype;
		end
		if (FlatIdent_580CB == (1 - 0)) then
			addarg = nil;
			function addarg(annotations, s)
				local FlatIdent_77172 = 1911 - (340 + 1571);
				while true do
					if (FlatIdent_77172 == (1 + 0)) then
						return "";
					end
					if (FlatIdent_77172 == (1772 - (1733 + 39))) then
						if annotations:find("r") then
							s = "r" .. s;
						end
						if not retval then
							retval = s;
						else
							table.insert(ftype, s);
						end
						FlatIdent_77172 = 2 - 1;
					end
				end
			end
			FlatIdent_580CB = 1036 - (125 + 909);
		end
		if (FlatIdent_580CB == (1950 - (1096 + 852))) then
			s, n = mtype;
			while s ~= "" do
				local FlatIdent_7E707 = 0 + 0;
				while true do
					if (FlatIdent_7E707 == (3 - 0)) then
						assert(n > (0 + 0), mtype);
						break;
					end
					if (FlatIdent_7E707 == (512 - (409 + 103))) then
						s, n = s:gsub(obf_cached_str[154], addarg);
						if (n == (236 - (46 + 190))) then
							s, n = s:gsub(obf_cached_str[156], addarg);
						end
						FlatIdent_7E707 = 96 - (51 + 44);
					end
					if (FlatIdent_7E707 == (1 + 0)) then
						if (n == (1317 - (1114 + 203))) then
							s, n = s:gsub(obf_cached_str[158], addarg);
						end
						if (n == (726 - (228 + 498))) then
							s, n = s:gsub(obf_cached_str[160], addarg);
						end
						FlatIdent_7E707 = 1 + 1;
					end
					if (FlatIdent_7E707 == (2 + 0)) then
						if (n == (663 - (174 + 489))) then
							s, n = s:gsub('^([rnNoORV]*)(@"[A-Z][^"]+")%d*', addarg);
						end
						if (n == (0 - 0)) then
							s, n = s:gsub(obf_cached_str[164], addarg);
						end
						FlatIdent_7E707 = 1908 - (830 + 1075);
					end
				end
			end
			FlatIdent_580CB = 527 - (303 + 221);
		end
		if (FlatIdent_580CB == (1269 - (231 + 1038))) then
			ftype = {};
			retval = nil;
			FlatIdent_580CB = 1 + 0;
		end
	end
end
local function ftype_needs_wrapping(ftype)
	local FlatIdent_5E109 = 1162 - (171 + 991);
	while true do
		if (FlatIdent_5E109 == (0 - 0)) then
			if ftype[obf_cached_str[165]] then
				return true;
			end
			for i = 2 - 1, #ftype do
				if ftype[i]:find(obf_cached_str[167]) then
					return true;
				end
			end
			FlatIdent_5E109 = 2 - 1;
		end
		if (FlatIdent_5E109 == (1 + 0)) then
			if (ftype[obf_cached_str[168]] and ftype[obf_cached_str[169]]:find(obf_cached_str[171])) then
				return true;
			end
			break;
		end
	end
end
local function ftype_ctype(ftype, name, for_callback)
	local FlatIdent_15A17 = 0 - 0;
	local retval;
	local lastarg;
	local t;
	local args;
	local vararg;
	while true do
		if (FlatIdent_15A17 == (0 - 0)) then
			retval = ftype[obf_cached_str[172]];
			lastarg = #ftype;
			FlatIdent_15A17 = 1 - 0;
		end
		if (FlatIdent_15A17 == (3 - 2)) then
			if for_callback then
				local FlatIdent_3F7F4 = 1248 - (111 + 1137);
				while true do
					if ((158 - (91 + 67)) == FlatIdent_3F7F4) then
						for i = 2 - 1, #ftype do
							if ftype[i]:find(obf_cached_str[174]) then
								lastarg = i - (1 + 0);
							end
						end
						if (retval and retval:find(obf_cached_str[176])) then
							retval = nil;
						end
						break;
					end
				end
			end
			t = {};
			FlatIdent_15A17 = 525 - (423 + 100);
		end
		if (FlatIdent_15A17 == (1 + 3)) then
			if name then
				return _(obf_cached_str[177], retval, name, args, vararg);
			else
				return _(obf_cached_str[178], retval, args, vararg);
			end
			break;
		end
		if (FlatIdent_15A17 == (7 - 4)) then
			retval = (retval and stype_ctype(retval)) or obf_cached_str[179];
			vararg = (not for_callback and ftype[obf_cached_str[180]] and (((#t > (0 + 0)) and obf_cached_str[181]) or obf_cached_str[182])) or "";
			FlatIdent_15A17 = 775 - (326 + 445);
		end
		if (FlatIdent_15A17 == (8 - 6)) then
			for i = 2 - 1, lastarg do
				t[i] = stype_ctype(ftype[i]);
			end
			args = table.concat(t, obf_cached_str[185]);
			FlatIdent_15A17 = 6 - 3;
		end
	end
end
local function ftype_mtype(ftype)
	return (ftype[obf_cached_str[186]] or "v") .. table.concat(ftype);
end
local static_mtype_ftype = memoize(function(mtype)
	return mtype_ftype(mtype);
end);
local ctype_ct = memoize(function(ctype)
	local FlatIdent_43626 = 711 - (530 + 181);
	local ok;
	local ct;
	while true do
		if (FlatIdent_43626 == (882 - (614 + 267))) then
			return ct;
		end
		if ((32 - (19 + 13)) == FlatIdent_43626) then
			ok, ct = pcall(ffi.typeof, ctype);
			check(ok, 'ctype error for "%s": %s', ctype, ct);
			FlatIdent_43626 = 1 - 0;
		end
	end
end);
local function ftype_ct(ftype, name, for_callback)
	local FlatIdent_8FBAE = 0 - 0;
	local cachekey;
	local ct;
	while true do
		if (FlatIdent_8FBAE == (0 - 0)) then
			cachekey = obf_cached_str[191] or obf_cached_str[192];
			ct = ftype[cachekey] or ctype_ct(ftype_ctype(ftype, name, for_callback));
			FlatIdent_8FBAE = 1 + 0;
		end
		if (FlatIdent_8FBAE == (1 - 0)) then
			ftype[cachekey] = ct;
			return ct;
		end
	end
end
objc.MSHookMessageEx = function(_class, _sel, _hook)
	local FlatIdent_71EE8 = 0 - 0;
	local class;
	local sel;
	local typeEncode;
	local ftype;
	local ctype;
	local imp;
	local out;
	while true do
		if ((1813 - (1293 + 519)) == FlatIdent_71EE8) then
			ctype = ftype_ctype(ftype, nil, false);
			print(ctype);
			imp = ffi.cast(ffi.typeof(ctype), _hook);
			imp = ffi.cast(obf_cached_str[197], imp);
			FlatIdent_71EE8 = 3 - 1;
		end
		if (FlatIdent_71EE8 == (0 - 0)) then
			class = C.objc_getClass(_class);
			sel = C.sel_registerName(_sel);
			typeEncode = ffi.string(C.method_getTypeEncoding(C.class_getInstanceMethod(class, sel)));
			ftype = mtype_ftype(typeEncode);
			FlatIdent_71EE8 = 1 - 0;
		end
		if (FlatIdent_71EE8 == (8 - 6)) then
			out = ffi.new(obf_cached_str[204]);
			C.MSHookMessageEx(class, sel, imp, out);
			return ffi.cast(obf_cached_str[207], out[0 - 0]);
		end
	end
end;
lazyfuncs = true;
loaddeps = false;
rename = {[obf_cached_str[208]]={},[obf_cached_str[209]]={},[obf_cached_str[210]]={},[obf_cached_str[211]]={},[obf_cached_str[212]]={}};
rename[obf_cached_str[213]][obf_cached_str[214]] = obf_cached_str[215];
rename[obf_cached_str[216]][obf_cached_str[217]] = obf_cached_str[218];
local function global(name, kind)
	return rename[kind][name] or name;
end
local tag = {};
tag.depends_on = function(attrs)
	local FlatIdent_10550 = 0 + 0;
	local ok;
	local loaderr;
	while true do
		if ((0 + 0) == FlatIdent_10550) then
			if not loaddeps then
				return;
			end
			ok, loaderr = pcall(load_framework, attrs.path);
			FlatIdent_10550 = 2 - 1;
		end
		if (FlatIdent_10550 == (1 + 0)) then
			if not ok then
				err(obf_cached_str[221], obf_cached_str[222], loaderr);
			end
			break;
		end
	end
end;
local typekey = (x64 and obf_cached_str[223]) or obf_cached_str[224];
local valkey = (x64 and obf_cached_str[225]) or obf_cached_str[226];
tag.string_constant = function(attrs)
	rawset(objc, global(attrs.name, obf_cached_str[229]), attrs.value);
end;
tag.enum = function(attrs)
	local FlatIdent_43BEE = 0 + 0;
	local s;
	while true do
		if (FlatIdent_43BEE == (1 + 0)) then
			if not s then
				return;
			end
			rawset(objc, global(attrs.name, obf_cached_str[233]), tonumber(s));
			break;
		end
		if ((1096 - (709 + 387)) == FlatIdent_43BEE) then
			if (attrs[obf_cached_str[234]] == obf_cached_str[235]) then
				return;
			end
			s = attrs[valkey] or attrs[obf_cached_str[236]];
			FlatIdent_43BEE = 1859 - (673 + 1185);
		end
	end
end;
local function cdef_node(attrs, typedecl, deftype)
	local FlatIdent_6C967 = 0 - 0;
	local name;
	local s;
	local ctype;
	while true do
		if (FlatIdent_6C967 == (0 - 0)) then
			name = global(attrs.name, typedecl);
			if defined(name, obf_cached_str[238]) then
				return;
			end
			FlatIdent_6C967 = 1 - 0;
		end
		if (FlatIdent_6C967 == (1 + 0)) then
			s = attrs[typekey] or attrs[obf_cached_str[239]];
			if not s then
				return;
			end
			FlatIdent_6C967 = 2 + 0;
		end
		if ((2 - 0) == FlatIdent_6C967) then
			ctype = stype_ctype(s, name, deftype);
			declare(name, obf_cached_str[240], _(obf_cached_str[241], typedecl, ctype));
			break;
		end
	end
end
tag.constant = function(attrs)
	cdef_node(attrs, obf_cached_str[243]);
end;
tag.struct = function(attrs)
	cdef_node(attrs, obf_cached_str[245], ((attrs[obf_cached_str[246]] ~= obf_cached_str[247]) and obf_cached_str[248]) or nil);
end;
tag.cftype = function(attrs)
	cdef_node(attrs, obf_cached_str[250], obf_cached_str[251]);
end;
tag.opaque = function(attrs)
	cdef_node(attrs, obf_cached_str[253]);
end;
local function fp_arg(argtag, attrs, getwhile)
	local FlatIdent_360E8 = 0 + 0;
	local argtype;
	local fp;
	while true do
		if (FlatIdent_360E8 == (0 - 0)) then
			if (attrs[obf_cached_str[254]] ~= obf_cached_str[255]) then
				return;
			end
			argtype = attrs[typekey] or attrs[obf_cached_str[256]];
			FlatIdent_360E8 = 1 - 0;
		end
		if (FlatIdent_360E8 == (1882 - (446 + 1434))) then
			for tag, attrs in getwhile(argtag) do
				if ((tag == obf_cached_str[257]) or (tag == obf_cached_str[258])) then
					local FlatIdent_33DE6 = 1283 - (1040 + 243);
					local fp1;
					while true do
						if ((0 - 0) == FlatIdent_33DE6) then
							if fp then
								local FlatIdent_1512 = 1847 - (559 + 1288);
								local argtype;
								while true do
									if ((1931 - (609 + 1322)) == FlatIdent_1512) then
										argtype = attrs[typekey] or attrs[obf_cached_str[259]];
										if not argtype then
											fp = nil;
										else
											local FlatIdent_229D1 = 454 - (13 + 441);
											local argindex;
											while true do
												if (FlatIdent_229D1 == (0 - 0)) then
													argindex = ((tag == obf_cached_str[260]) and obf_cached_str[261]) or (#fp + (2 - 1));
													if not ((argindex == obf_cached_str[262]) and (argtype == "v")) then
														fp[argindex] = argtype;
													end
													break;
												end
											end
										end
										break;
									end
								end
							end
							fp1 = fp_arg(tag, attrs, getwhile);
							FlatIdent_33DE6 = 4 - 3;
						end
						if (FlatIdent_33DE6 == (1 + 0)) then
							if (fp and fp1) then
								local FlatIdent_71E8F = 0 - 0;
								local argindex;
								while true do
									if (FlatIdent_71E8F == (1 + 0)) then
										fp[obf_cached_str[264]][argindex] = fp1;
										break;
									end
									if (FlatIdent_71E8F == (0 + 0)) then
										argindex = ((tag == obf_cached_str[265]) and obf_cached_str[266]) or (#fp + (2 - 1));
										fp[obf_cached_str[267]] = fp[obf_cached_str[268]] or {};
										FlatIdent_71E8F = 1 + 0;
									end
								end
							end
							for _ in getwhile(tag) do
							end
							break;
						end
					end
				end
			end
			return fp;
		end
		if (FlatIdent_360E8 == (1 - 0)) then
			fp = {[obf_cached_str[269]]=((argtype == obf_cached_str[270]) or nil)};
			if fp[obf_cached_str[271]] then
				fp[1 + 0] = obf_cached_str[272];
			end
			FlatIdent_360E8 = 2 + 0;
		end
	end
end
local function_caller;
local function add_function(name, ftype, lazy)
	local FlatIdent_5AB84 = 0 + 0;
	local addfunc;
	while true do
		if (FlatIdent_5AB84 == (1 + 0)) then
			function addfunc()
				local FlatIdent_5077 = 0 + 0;
				local cfunc;
				local caller;
				while true do
					if (FlatIdent_5077 == (433 - (153 + 280))) then
						declare(name, obf_cached_str[273], ftype_ctype(ftype, name));
						cfunc = csymbol(name);
						FlatIdent_5077 = 2 - 1;
					end
					if (FlatIdent_5077 == (2 + 0)) then
						rawset(objc, name, caller);
						return caller;
					end
					if (FlatIdent_5077 == (1 + 0)) then
						if not cfunc then
							local FlatIdent_77529 = 0 + 0;
							while true do
								if ((0 + 0) == FlatIdent_77529) then
									err(obf_cached_str[274], obf_cached_str[275], name);
									return;
								end
							end
						end
						caller = function_caller(ftype, cfunc);
						FlatIdent_5077 = 2 + 0;
					end
				end
			end
			if lazy then
				rawset(objc, name, function(...)
					local FlatIdent_84B7E = 0 - 0;
					local func;
					while true do
						if (FlatIdent_84B7E == (0 + 0)) then
							func = addfunc();
							if not func then
								return;
							end
							FlatIdent_84B7E = 668 - (89 + 578);
						end
						if ((1 + 0) == FlatIdent_84B7E) then
							return func(...);
						end
					end
				end);
			else
				addfunc();
			end
			break;
		end
		if (FlatIdent_5AB84 == (0 - 0)) then
			if (lazy == nil) then
				lazy = lazyfuncs;
			end
			addfunc = nil;
			FlatIdent_5AB84 = 1050 - (572 + 477);
		end
	end
end
tag[obf_cached_str[276]] = function(attrs, getwhile)
	local FlatIdent_14124 = 0 + 0;
	local name;
	local ftype;
	while true do
		if ((0 + 0) == FlatIdent_14124) then
			name = global(attrs.name, obf_cached_str[278]);
			if defined(name, obf_cached_str[279]) then
				return;
			end
			FlatIdent_14124 = 1 + 0;
		end
		if (FlatIdent_14124 == (87 - (84 + 2))) then
			ftype = {[obf_cached_str[280]]=((attrs[obf_cached_str[281]] == obf_cached_str[282]) or nil)};
			for tag, attrs in getwhile(obf_cached_str[283]) do
				if (ftype and ((tag == obf_cached_str[284]) or (tag == obf_cached_str[285]))) then
					local FlatIdent_37555 = 0 - 0;
					local argtype;
					while true do
						if (FlatIdent_37555 == (0 + 0)) then
							argtype = attrs[typekey] or attrs[obf_cached_str[286]];
							if not argtype then
								ftype = nil;
							else
								local FlatIdent_11AA1 = 842 - (497 + 345);
								local argindex;
								local fp;
								while true do
									if ((1 + 0) == FlatIdent_11AA1) then
										fp = fp_arg(tag, attrs, getwhile);
										if fp then
											local FlatIdent_3501F = 0 + 0;
											while true do
												if ((1333 - (605 + 728)) == FlatIdent_3501F) then
													ftype[obf_cached_str[287]] = ftype[obf_cached_str[288]] or {};
													ftype[obf_cached_str[289]][argindex] = fp;
													break;
												end
											end
										end
										break;
									end
									if (FlatIdent_11AA1 == (0 + 0)) then
										argindex = ((tag == obf_cached_str[290]) and obf_cached_str[291]) or (#ftype + (1 - 0));
										if not ((argindex == obf_cached_str[292]) and (argtype == "v")) then
											ftype[argindex] = argtype;
										end
										FlatIdent_11AA1 = 1 + 0;
									end
								end
							end
							break;
						end
					end
				end
			end
			FlatIdent_14124 = 7 - 5;
		end
		if (FlatIdent_14124 == (2 + 0)) then
			if ftype then
				add_function(name, ftype);
			end
			break;
		end
	end
end;
local add_informal_protocol;
local add_informal_protocol_method;
tag.informal_protocol = function(attrs, getwhile)
	local FlatIdent_15F29 = 0 - 0;
	local proto;
	while true do
		if (FlatIdent_15F29 == (0 + 0)) then
			proto = add_informal_protocol(attrs.name);
			for tag, attrs in getwhile(obf_cached_str[296]) do
				if (proto and (tag == obf_cached_str[297])) then
					local FlatIdent_2C980 = 489 - (457 + 32);
					local mtype;
					while true do
						if (FlatIdent_2C980 == (0 + 0)) then
							mtype = attrs[typekey] or attrs[obf_cached_str[298]];
							if mtype then
								add_informal_protocol_method(proto, attrs.selector, attrs[obf_cached_str[300]] ~= obf_cached_str[301], mtype);
							end
							break;
						end
					end
				end
			end
			break;
		end
	end
end;
local mta = {[true]={},[false]={}};
tag.class = function(attrs, getwhile)
	local FlatIdent_58E6A = 1402 - (832 + 570);
	local inst_methods;
	local class_methods;
	local classname;
	while true do
		if (FlatIdent_58E6A == (0 + 0)) then
			inst_methods = {};
			class_methods = {};
			FlatIdent_58E6A = 1 + 0;
		end
		if (FlatIdent_58E6A == (3 - 2)) then
			classname = attrs[obf_cached_str[303]];
			for tag, attrs in getwhile(obf_cached_str[304]) do
				if (tag == obf_cached_str[305]) then
					local FlatIdent_69D54 = 0 + 0;
					local meth;
					local inst;
					local methodname;
					while true do
						if (FlatIdent_69D54 == (798 - (588 + 208))) then
							for tag, attrs in getwhile(obf_cached_str[306]) do
								if (meth and ((tag == obf_cached_str[307]) or (tag == obf_cached_str[308]))) then
									local FlatIdent_322B4 = 0 - 0;
									local argtype;
									local argindex;
									local fp;
									while true do
										if (FlatIdent_322B4 == (1801 - (884 + 916))) then
											if ((tag == obf_cached_str[309]) and (argtype == "B")) then
												meth[obf_cached_str[311]] = "B";
											end
											fp = fp_arg(tag, attrs, getwhile);
											FlatIdent_322B4 = 3 - 1;
										end
										if (FlatIdent_322B4 == (2 + 0)) then
											if fp then
												local FlatIdent_499B1 = 653 - (232 + 421);
												while true do
													if (FlatIdent_499B1 == (1889 - (1569 + 320))) then
														meth[obf_cached_str[313]] = meth[obf_cached_str[314]] or {};
														meth[obf_cached_str[315]][argindex] = fp;
														break;
													end
												end
											end
											break;
										end
										if (FlatIdent_322B4 == (0 + 0)) then
											argtype = attrs[typekey] or attrs[obf_cached_str[316]];
											argindex = ((tag == obf_cached_str[317]) and obf_cached_str[318]) or (attrs[obf_cached_str[319]] + 1 + 0 + (6 - 4));
											FlatIdent_322B4 = 606 - (316 + 289);
										end
									end
								end
							end
							if (meth and next(meth)) then
								if inst then
									inst_methods[methodname] = meth;
								else
									class_methods[methodname] = meth;
								end
							end
							break;
						end
						if (FlatIdent_69D54 == (0 - 0)) then
							meth = {};
							inst = attrs[obf_cached_str[320]] ~= obf_cached_str[321];
							FlatIdent_69D54 = 1 + 0;
						end
						if (FlatIdent_69D54 == (1454 - (666 + 787))) then
							meth[obf_cached_str[322]] = (attrs[obf_cached_str[323]] == obf_cached_str[324]) or nil;
							methodname = attrs[obf_cached_str[325]];
							FlatIdent_69D54 = 427 - (360 + 65);
						end
					end
				end
			end
			FlatIdent_58E6A = 2 + 0;
		end
		if (FlatIdent_58E6A == (256 - (79 + 175))) then
			if next(inst_methods) then
				mta[true][classname] = inst_methods;
			end
			if next(class_methods) then
				mta[false][classname] = class_methods;
			end
			break;
		end
	end
end;
local function get_raw_mta(classname, selname, inst)
	local FlatIdent_79729 = 0 - 0;
	local cls;
	while true do
		if ((0 + 0) == FlatIdent_79729) then
			cls = mta[inst][classname];
			return cls and cls[selname];
		end
	end
end
tag.function_alias = function(attrs)
	local FlatIdent_FBDE = 0 - 0;
	local name;
	local original;
	while true do
		if (FlatIdent_FBDE == (0 - 0)) then
			name = attrs[obf_cached_str[327]];
			original = attrs[obf_cached_str[328]];
			FlatIdent_FBDE = 900 - (503 + 396);
		end
		if (FlatIdent_FBDE == (182 - (92 + 89))) then
			rawset(objc, name, function(...)
				local FlatIdent_4BE81 = 0 - 0;
				local origfunc;
				while true do
					if (FlatIdent_4BE81 == (1 + 0)) then
						return origfunc(...);
					end
					if (FlatIdent_4BE81 == (0 + 0)) then
						origfunc = objc[original];
						rawset(objc, name, origfunc);
						FlatIdent_4BE81 = 3 - 2;
					end
				end
			end);
			break;
		end
	end
end;
local function process_tags(gettag)
	local FlatIdent_43E8E = 0 + 0;
	local nextwhile;
	local getwhile;
	while true do
		if ((4 - 2) == FlatIdent_43E8E) then
			for tagname, attrs in getwhile(obf_cached_str[329]) do
				if tag[tagname] then
					tag[tagname](attrs, getwhile);
				end
			end
			break;
		end
		if (FlatIdent_43E8E == (1 + 0)) then
			getwhile = nil;
			function getwhile(endtag)
				return nextwhile, endtag;
			end
			FlatIdent_43E8E = 1 + 1;
		end
		if (FlatIdent_43E8E == (0 - 0)) then
			nextwhile = nil;
			function nextwhile(endtag)
				local FlatIdent_47A85 = 0 + 0;
				local start;
				local tag;
				local attrs;
				while true do
					if (FlatIdent_47A85 == (1 - 0)) then
						return tag, attrs;
					end
					if (FlatIdent_47A85 == (1244 - (485 + 759))) then
						start, tag, attrs = gettag();
						if not start then
							local FlatIdent_1B5ED = 0 - 0;
							while true do
								if (FlatIdent_1B5ED == (1189 - (442 + 747))) then
									if (tag == endtag) then
										return;
									end
									return nextwhile(endtag);
								end
							end
						end
						FlatIdent_47A85 = 1136 - (832 + 303);
					end
				end
			end
			FlatIdent_43E8E = 947 - (88 + 858);
		end
	end
end
local function readfile(name)
	local FlatIdent_1B418 = 0 + 0;
	local f;
	local s;
	while true do
		if (FlatIdent_1B418 == (0 + 0)) then
			f = assert(io.open(name, obf_cached_str[331]));
			s = f:read(obf_cached_str[333]);
			FlatIdent_1B418 = 1 + 0;
		end
		if (FlatIdent_1B418 == (790 - (766 + 23))) then
			f:close();
			return s;
		end
	end
end
local function parse_xml(path, write)
	local FlatIdent_1F138 = 0 - 0;
	local s;
	while true do
		if (FlatIdent_1F138 == (0 - 0)) then
			s = readfile(path);
			for endtag, tag, attrs, tagends in s:gmatch("<(/?)([%a_][%w_]*)([^/>]*)(/?)>") do
				if (endtag == "/") then
					write(false, tag);
				else
					local FlatIdent_61AEE = 0 - 0;
					local t;
					while true do
						if (FlatIdent_61AEE == (0 - 0)) then
							t = {};
							for name, val in attrs:gmatch('([%a_][%w_]*)=["\']([^"\']*)["\']') do
								local FlatIdent_1077D = 1073 - (1036 + 37);
								while true do
									if ((0 + 0) == FlatIdent_1077D) then
										if val:find(obf_cached_str[341], 1 - 0, true) then
											val = val:gsub(obf_cached_str[343], '"');
										end
										t[name] = val;
										break;
									end
								end
							end
							FlatIdent_61AEE = 1 + 0;
						end
						if (FlatIdent_61AEE == (1481 - (641 + 839))) then
							write(true, tag, t);
							if (tagends == "/") then
								write(false, tag);
							end
							break;
						end
					end
				end
			end
			break;
		end
	end
end
usexpat = false;
local function process_xml(path, processor, ...)
	local FlatIdent_89C1C = 913 - (910 + 3);
	local send;
	while true do
		if (FlatIdent_89C1C == (2 - 1)) then
			if usexpat then
				local FlatIdent_59C45 = 1684 - (1466 + 218);
				local expat;
				while true do
					if (FlatIdent_59C45 == (0 + 0)) then
						expat = require(obf_cached_str[346]);
						expat.parse({[obf_cached_str[348]]=path}, {[obf_cached_str[349]]=function(name, attrs)
							send(true, name, attrs);
						end,[obf_cached_str[350]]=function(name)
							send(false, name);
						end});
						break;
					end
				end
			else
				parse_xml(path, send);
			end
			break;
		end
		if (FlatIdent_89C1C == (1148 - (556 + 592))) then
			send = coroutine.wrap(processor);
			send(coroutine.yield, ...);
			FlatIdent_89C1C = 1 + 0;
		end
	end
end
function load_bridgesupport(path)
	process_xml(path, process_tags);
end
loadtypes = true;
local searchpaths = {"/System/Library/Frameworks","/Library/Frameworks","~/Library/Frameworks"};
function find_framework(name)
	local FlatIdent_31791 = 0 - 0;
	local path;
	while true do
		if (FlatIdent_31791 == (0 + 0)) then
			if name:find("^/") then
				local FlatIdent_58A9D = 739 - (396 + 343);
				local path;
				local name;
				while true do
					if ((0 + 0) == FlatIdent_58A9D) then
						path = name;
						name = path:match("([^/]+)%.framework$");
						FlatIdent_58A9D = 1478 - (29 + 1448);
					end
					if ((1390 - (135 + 1254)) == FlatIdent_58A9D) then
						if not name then
							local FlatIdent_37E3 = 0 - 0;
							while true do
								if (FlatIdent_37E3 == (0 - 0)) then
									name = path:match("([^/]+)$");
									path = name and path:sub(1 + 0, -#name - (1529 - (389 + 1138)));
									break;
								end
							end
						end
						if (name and canread(path)) then
							return path, name;
						end
						break;
					end
				end
			else
				local FlatIdent_64E47 = 574 - (102 + 472);
				local subname;
				while true do
					if ((1 + 0) == FlatIdent_64E47) then
						subname = subname:gsub(obf_cached_str[364], obf_cached_str[365]);
						name = name:match("([^%./]+)$");
						FlatIdent_64E47 = 2 + 0;
					end
					if (FlatIdent_64E47 == (0 + 0)) then
						subname = name:gsub(obf_cached_str[369], obf_cached_str[370]);
						subname = subname:gsub(obf_cached_str[372], ".framework/Versions/Current/Frameworks/");
						FlatIdent_64E47 = 1546 - (320 + 1225);
					end
					if (FlatIdent_64E47 == (2 - 0)) then
						for i, path in pairs(searchpaths) do
							local FlatIdent_202CC = 0 + 0;
							while true do
								if (FlatIdent_202CC == (1464 - (157 + 1307))) then
									path = _("%s/%s.framework", path, subname);
									if canread(path) then
										return path, name;
									end
									break;
								end
							end
						end
						break;
					end
				end
			end
			path = _("/System/Library/Frameworks/%s.framework", name);
			FlatIdent_31791 = 1860 - (821 + 1038);
		end
		if ((2 - 1) == FlatIdent_31791) then
			return path, name;
		end
	end
end
loaded = {};
loaded_bs = {};
function load_framework(namepath, option)
	local FlatIdent_33F65 = 0 + 0;
	local basepath;
	local name;
	while true do
		if (FlatIdent_33F65 == (1 - 0)) then
			check(basepath, obf_cached_str[376], namepath);
			if not loaded[basepath] then
				local FlatIdent_8DAB1 = 0 + 0;
				local path;
				while true do
					if (FlatIdent_8DAB1 == (0 - 0)) then
						path = _("%s/%s", basepath, name);
						ffi.load(path, true);
						FlatIdent_8DAB1 = 1027 - (834 + 192);
					end
					if (FlatIdent_8DAB1 == (1 + 1)) then
						log(obf_cached_str[379], obf_cached_str[380], basepath);
						loaded[basepath] = true;
						break;
					end
					if (FlatIdent_8DAB1 == (1 + 0)) then
						path = _("%s/Resources/BridgeSupport/%s.dylib", basepath, name);
						if canread(path) then
							ffi.load(path, true);
						end
						FlatIdent_8DAB1 = 1 + 1;
					end
				end
			end
			FlatIdent_33F65 = 2 - 0;
		end
		if (FlatIdent_33F65 == (304 - (300 + 4))) then
			if (not OSX and (ffi[obf_cached_str[383]] ~= obf_cached_str[384])) then
				error(obf_cached_str[385], 1 + 1);
			end
			basepath, name = find_framework(namepath);
			FlatIdent_33F65 = 2 - 1;
		end
		if (FlatIdent_33F65 == (364 - (112 + 250))) then
			if (loadtypes and (option ~= obf_cached_str[386]) and not loaded_bs[basepath]) then
				local FlatIdent_21387 = 0 + 0;
				local path;
				while true do
					if (FlatIdent_21387 == (0 - 0)) then
						loaded_bs[basepath] = true;
						path = _("%s/Resources/BridgeSupport/%s.bridgesupport", basepath, name);
						FlatIdent_21387 = 1 + 0;
					end
					if (FlatIdent_21387 == (1 + 0)) then
						if canread(path) then
							load_bridgesupport(path);
						end
						break;
					end
				end
			end
			break;
		end
	end
end
local selector_object = memoize(function(name)
	local FlatIdent_C758 = 0 + 0;
	while true do
		if (FlatIdent_C758 == (0 + 0)) then
			name = name:match(obf_cached_str[389]) .. name:gsub(obf_cached_str[391], ""):gsub("_", ":");
			return ptr(C.sel_registerName(name));
		end
	end
end);
local function selector(name)
	local FlatIdent_602BB = 0 + 0;
	while true do
		if (FlatIdent_602BB == (1414 - (1001 + 413))) then
			if (type(name) ~= obf_cached_str[397]) then
				return name;
			end
			return selector_object(name);
		end
	end
end
local function selector_name(sel)
	return ffi.string(C.sel_getName(sel));
end
ffi.metatype(obf_cached_str[401], {[obf_cached_str[402]]=selector_name,[obf_cached_str[403]]={[obf_cached_str[404]]=selector_name}});
local function formal_protocols()
	return citer(own(C.objc_copyProtocolList(nil)));
end
local function formal_protocol(name)
	return ptr(C.objc_getProtocol(name));
end
local function formal_protocol_name(proto)
	return ffi.string(C.protocol_getName(proto));
end
local function formal_protocol_protocols(proto)
	return citer(own(C.protocol_copyProtocolList(proto, nil)));
end
local function formal_protocol_properties(proto)
	return citer(own(C.protocol_copyPropertyList(proto, nil)));
end
local function formal_protocol_property(proto, name, required, readonly)
	return ptr(C.protocol_getProperty(proto, name, required, readonly));
end
local function formal_protocol_methods(proto, inst, required)
	local FlatIdent_6038 = 0 - 0;
	local desc;
	local i;
	while true do
		if (FlatIdent_6038 == (882 - (244 + 638))) then
			desc = own(C.protocol_copyMethodDescriptionList(proto, required, inst, nil));
			i = -(694 - (627 + 66));
			FlatIdent_6038 = 2 - 1;
		end
		if (FlatIdent_6038 == (603 - (512 + 90))) then
			return function()
				local FlatIdent_5C19E = 1906 - (1665 + 241);
				while true do
					if (FlatIdent_5C19E == (718 - (373 + 344))) then
						if (desc[i][obf_cached_str[413]] == nil) then
							return;
						end
						return selector_name(desc[i].name), ffi.string(desc[i].types);
					end
					if (FlatIdent_5C19E == (0 + 0)) then
						i = i + 1 + 0;
						if (desc == nil) then
							return;
						end
						FlatIdent_5C19E = 2 - 1;
					end
				end
			end;
		end
	end
end
local function formal_protocol_mtype(proto, sel, inst, required)
	local FlatIdent_63A3A = 0 - 0;
	local desc;
	while true do
		if (FlatIdent_63A3A == (1100 - (35 + 1064))) then
			return ffi.string(desc.types);
		end
		if (FlatIdent_63A3A == (0 + 0)) then
			desc = C.protocol_getMethodDescription(proto, sel, required, inst);
			if (desc[obf_cached_str[420]] == nil) then
				return;
			end
			FlatIdent_63A3A = 2 - 1;
		end
	end
end
local function formal_protocol_ftype(...)
	return static_mtype_ftype(formal_protocol_mtype(...));
end
local function formal_protocol_ctype(proto, sel, inst, required, for_callback)
	return ftype_ctype(formal_protocol_ftype(proto, sel, inst, required), nil, for_callback);
end
local function formal_protocol_ct(proto, sel, inst, required, for_callback)
	return ftype_ct(formal_protocol_ftype(proto, sel, inst, required), nil, for_callback);
end
ffi.metatype(obf_cached_str[422], {[obf_cached_str[423]]=formal_protocol_name,[obf_cached_str[424]]={[obf_cached_str[425]]=true,[obf_cached_str[426]]=formal_protocol_name,[obf_cached_str[427]]=formal_protocol_protocols,[obf_cached_str[428]]=formal_protocol_properties,[obf_cached_str[429]]=formal_protocol_property,[obf_cached_str[430]]=formal_protocol_methods,[obf_cached_str[431]]=formal_protocol_mtype,[obf_cached_str[432]]=formal_protocol_ftype,[obf_cached_str[433]]=formal_protocol_ctype,[obf_cached_str[434]]=formal_protocol_ct}});
local informal_protocols = {};
local infprot = {[obf_cached_str[435]]=false};
local infprot_meta = {[obf_cached_str[436]]=infprot};
local function informal_protocol(name)
	return informal_protocols[name];
end
function add_informal_protocol(name)
	local FlatIdent_70C30 = 0 + 0;
	local proto;
	while true do
		if (FlatIdent_70C30 == (1237 - (298 + 938))) then
			informal_protocols[name] = proto;
			return proto;
		end
		if (FlatIdent_70C30 == (1259 - (233 + 1026))) then
			if (OSX and formal_protocol(name)) then
				return;
			end
			proto = setmetatable({[obf_cached_str[437]]=name,[obf_cached_str[438]]={}}, infprot_meta);
			FlatIdent_70C30 = 1667 - (636 + 1030);
		end
	end
end
function add_informal_protocol_method(proto, selname, inst, mtype)
	proto[obf_cached_str[439]][selname] = {[obf_cached_str[440]]=inst,[obf_cached_str[441]]=mtype};
end
infprot.name = function(self)
	return self[obf_cached_str[443]];
end;
infprot_meta[obf_cached_str[444]] = infprot[obf_cached_str[445]];
local function noop()
	return;
end
infprot.protocols = function(self)
	return noop;
end;
infprot.properties = function(self)
	return noop;
end;
infprot[obf_cached_str[448]] = noop;
infprot.methods = function(self, inst, required)
	local FlatIdent_6245F = 0 + 0;
	while true do
		if (FlatIdent_6245F == (0 + 0)) then
			if required then
				return noop;
			end
			return coroutine.wrap(function()
				for sel, m in pairs(self._methods) do
					if (m[obf_cached_str[452]] == inst) then
						coroutine.yield(sel, m._mtype);
					end
				end
			end);
		end
	end
end;
infprot.mtype = function(self, sel, inst, required)
	local FlatIdent_14A42 = 0 + 0;
	local m;
	while true do
		if (FlatIdent_14A42 == (0 + 0)) then
			if required then
				return;
			end
			m = self[obf_cached_str[456]][selector_name(sel)];
			FlatIdent_14A42 = 222 - (55 + 166);
		end
		if (FlatIdent_14A42 == (1 + 0)) then
			return (m and (m[obf_cached_str[457]] == inst) and m[obf_cached_str[458]]) or nil;
		end
	end
end;
infprot.ftype = function(self, ...)
	return static_mtype_ftype(self:mtype(...));
end;
infprot.ctype = function(self, sel, inst, required, for_callback)
	return ftype_ctype(self:ftype(sel, inst, required), nil, for_callback);
end;
infprot.ct = function(self, sel, inst, required, for_callback)
	return ftype_ct(self:ftype(sel, inst, required), nil, for_callback);
end;
local function protocols()
	return coroutine.wrap(function()
		local FlatIdent_8751C = 0 + 0;
		while true do
			if (FlatIdent_8751C == (0 - 0)) then
				for proto in formal_protocols() do
					coroutine.yield(proto);
				end
				for name, proto in pairs(informal_protocols) do
					coroutine.yield(proto);
				end
				break;
			end
		end
	end);
end
local function protocol(name)
	local FlatIdent_1DE58 = 297 - (36 + 261);
	while true do
		if (FlatIdent_1DE58 == (0 - 0)) then
			if (type(name) ~= obf_cached_str[468]) then
				return name;
			end
			return check(formal_protocol(name) or informal_protocol(name), obf_cached_str[469], name);
		end
	end
end
local function property_name(prop)
	return ffi.string(C.property_getName(prop));
end
local prop_attr_decoders = {T=function(s, t)
	t[obf_cached_str[473]] = s;
end,V=function(s, t)
	t[obf_cached_str[475]] = s;
end,G=function(s, t)
	t[obf_cached_str[477]] = s;
end,S=function(s, t)
	t[obf_cached_str[479]] = s;
end,R=function(s, t)
	t[obf_cached_str[481]] = true;
end};
local property_attrs = memoize(function(prop)
	local FlatIdent_51FCC = 1368 - (34 + 1334);
	local s;
	local attrs;
	while true do
		if (FlatIdent_51FCC == (1 + 0)) then
			for k, v in (s .. ","):gmatch(obf_cached_str[484]) do
				local FlatIdent_6A0CF = 0 + 0;
				local decode;
				while true do
					if (FlatIdent_6A0CF == (1283 - (1035 + 248))) then
						decode = prop_attr_decoders[k];
						if decode then
							decode(v, attrs);
						end
						break;
					end
				end
			end
			return attrs;
		end
		if (FlatIdent_51FCC == (21 - (20 + 1))) then
			s = ffi.string(C.property_getAttributes(prop));
			attrs = {};
			FlatIdent_51FCC = 1 + 0;
		end
	end
end);
local function property_getter(prop)
	local FlatIdent_2DACE = 319 - (134 + 185);
	local attrs;
	while true do
		if (FlatIdent_2DACE == (1133 - (549 + 584))) then
			attrs = property_attrs(prop);
			if not attrs[obf_cached_str[487]] then
				attrs[obf_cached_str[488]] = property_name(prop);
			end
			FlatIdent_2DACE = 686 - (314 + 371);
		end
		if (FlatIdent_2DACE == (3 - 2)) then
			return attrs[obf_cached_str[489]];
		end
	end
end
local function property_setter(prop)
	local FlatIdent_401F9 = 968 - (478 + 490);
	local attrs;
	while true do
		if (FlatIdent_401F9 == (0 + 0)) then
			attrs = property_attrs(prop);
			if attrs[obf_cached_str[490]] then
				return;
			end
			FlatIdent_401F9 = 1173 - (786 + 386);
		end
		if (FlatIdent_401F9 == (3 - 2)) then
			if not attrs[obf_cached_str[491]] then
				local FlatIdent_2EB74 = 1379 - (1055 + 324);
				local name;
				while true do
					if (FlatIdent_2EB74 == (1340 - (1093 + 247))) then
						name = property_name(prop);
						attrs[obf_cached_str[492]] = _(obf_cached_str[493], name:sub(1 + 0, 1 + 0):upper(), name:sub(7 - 5));
						break;
					end
				end
			end
			return attrs[obf_cached_str[497]];
		end
	end
end
local function property_stype(prop)
	return property_attrs(prop)[obf_cached_str[498]];
end
local function property_ctype(prop)
	local FlatIdent_53895 = 0 - 0;
	local attrs;
	while true do
		if (FlatIdent_53895 == (0 - 0)) then
			attrs = property_attrs(prop);
			if not attrs[obf_cached_str[499]] then
				attrs[obf_cached_str[500]] = stype_ctype(attrs.stype);
			end
			FlatIdent_53895 = 2 - 1;
		end
		if (FlatIdent_53895 == (1 + 0)) then
			return attrs[obf_cached_str[502]];
		end
	end
end
local function property_readonly(prop)
	return property_attrs(prop)[obf_cached_str[503]] == true;
end
local function property_ivar(prop)
	return property_attrs(prop)[obf_cached_str[504]];
end
ffi.metatype(obf_cached_str[506], {[obf_cached_str[507]]=property_name,[obf_cached_str[508]]={[obf_cached_str[509]]=property_name,[obf_cached_str[510]]=property_getter,[obf_cached_str[511]]=property_setter,[obf_cached_str[512]]=property_stype,[obf_cached_str[513]]=property_ctype,[obf_cached_str[514]]=property_readonly,[obf_cached_str[515]]=property_ivar}});
local function method_selector(method)
	return ptr(C.method_getName(method));
end
local function method_name(method)
	return selector_name(method_selector(method));
end
local function method_mtype(method)
	return ffi.string(C.method_getTypeEncoding(method));
end
local function method_raw_ftype(method)
	return mtype_ftype(method_mtype(method));
end
local function method_raw_ctype(method)
	return ftype_ctype(method_raw_ftype(method));
end
local function method_raw_ctype_cb(method)
	return ftype_ctype(method_raw_ftype(method), nil, true);
end
local function method_imp(method)
	return ptr(C.method_getImplementation(method));
end
local method_exchange_imp = OSX and C[obf_cached_str[520]];
ffi.metatype(obf_cached_str[522], {[obf_cached_str[523]]=method_name,[obf_cached_str[524]]={[obf_cached_str[525]]=method_selector,[obf_cached_str[526]]=method_name,[obf_cached_str[527]]=method_mtype,[obf_cached_str[528]]=method_raw_ftype,[obf_cached_str[529]]=method_raw_ctype,[obf_cached_str[530]]=method_raw_ctype_cb,[obf_cached_str[531]]=method_imp,[obf_cached_str[532]]=method_exchange_imp}});
local function classes()
	return citer(own(C.objc_copyClassList(nil)));
end
local add_class_protocol;
local function isobj(x)
	return ffi.istype(id_ct, x);
end
local class_ct = ffi.typeof(obf_cached_str[536]);
local function isclass(x)
	return ffi.istype(class_ct, x);
end
local function ismetaclass(cls)
	return C.class_isMetaClass(cls) == (3 - 2);
end
local classof = OSX and C[obf_cached_str[539]];
local function class(name, super, proto, ...)
	local FlatIdent_6AE5 = 0 - 0;
	local superclass;
	local cls;
	while true do
		if (FlatIdent_6AE5 == (3 + 0)) then
			C.objc_registerClassPair(cls);
			if proto then
				add_class_protocol(cls, proto, ...);
			end
			FlatIdent_6AE5 = 9 - 5;
		end
		if (FlatIdent_6AE5 == (692 - (364 + 324))) then
			return cls;
		end
		if ((5 - 3) == FlatIdent_6AE5) then
			check(not class(name), obf_cached_str[541], name);
			cls = check(ptr(C.objc_allocateClassPair(superclass, name, 0 - 0)));
			FlatIdent_6AE5 = 1 + 2;
		end
		if (FlatIdent_6AE5 == (4 - 3)) then
			superclass = nil;
			if super then
				local FlatIdent_943B = 0 - 0;
				while true do
					if (FlatIdent_943B == (0 - 0)) then
						superclass = class(super);
						check(superclass, obf_cached_str[543], super);
						break;
					end
				end
			end
			FlatIdent_6AE5 = 1270 - (1249 + 19);
		end
		if (FlatIdent_6AE5 == (0 + 0)) then
			if (super == nil) then
				local FlatIdent_97F0B = 0 - 0;
				while true do
					if (FlatIdent_97F0B == (1086 - (686 + 400))) then
						if isclass(name) then
							return name;
						end
						if isobj(name) then
							return classof(name);
						end
						FlatIdent_97F0B = 1 + 0;
					end
					if (FlatIdent_97F0B == (230 - (73 + 156))) then
						check(type(name) == obf_cached_str[544], obf_cached_str[545], type(name));
						return ptr(C.objc_getClass(name));
					end
				end
			else
				check(type(name) == obf_cached_str[547], obf_cached_str[548], type(name));
			end
			if (type(super) == obf_cached_str[549]) then
				local FlatIdent_63284 = 0 + 0;
				local supername;
				local protos;
				while true do
					if (FlatIdent_63284 == (811 - (721 + 90))) then
						supername, protos = super:match(obf_cached_str[551]);
						if supername then
							local FlatIdent_74EA4 = 0 + 0;
							local t;
							while true do
								if ((3 - 2) == FlatIdent_74EA4) then
									t[#t + (471 - (224 + 246))] = proto;
									for i = 1 - 0, select("#", ...) do
										t[#t + (1 - 0)] = select(i, ...);
									end
									FlatIdent_74EA4 = 1 + 1;
								end
								if (FlatIdent_74EA4 == (0 + 0)) then
									t = {};
									for proto in (protos .. ","):gmatch(obf_cached_str[555]) do
										t[#t + 1 + 0] = proto;
									end
									FlatIdent_74EA4 = 1 - 0;
								end
								if ((6 - 4) == FlatIdent_74EA4) then
									return class(name, supername, unpack(t));
								end
							end
						end
						break;
					end
				end
			end
			FlatIdent_6AE5 = 514 - (203 + 310);
		end
	end
end
local function class_name(cls)
	local FlatIdent_73069 = 1993 - (1238 + 755);
	while true do
		if (FlatIdent_73069 == (0 + 0)) then
			if isobj(cls) then
				cls = classof(cls);
			end
			return ffi.string(C.class_getName(class(cls)));
		end
	end
end
local function superclass(cls)
	local FlatIdent_5E642 = 1534 - (709 + 825);
	while true do
		if (FlatIdent_5E642 == (0 - 0)) then
			if isobj(cls) then
				cls = classof(cls);
			end
			return ptr(C.class_getSuperclass(class(cls)));
		end
	end
end
local function metaclass(cls)
	local FlatIdent_532EC = 0 - 0;
	while true do
		if (FlatIdent_532EC == (865 - (196 + 668))) then
			if ismetaclass(cls) then
				return nil;
			end
			return ptr(classof(cls));
		end
		if ((0 - 0) == FlatIdent_532EC) then
			cls = class(cls);
			if isobj(cls) then
				cls = classof(cls);
			end
			FlatIdent_532EC = 1 - 0;
		end
	end
end
local function isa(cls, what)
	local FlatIdent_1351F = 833 - (171 + 662);
	local super;
	while true do
		if (FlatIdent_1351F == (95 - (4 + 89))) then
			return isa(super, what);
		end
		if ((3 - 2) == FlatIdent_1351F) then
			super = superclass(cls);
			if (super == what) then
				return true;
			elseif not super then
				return false;
			end
			FlatIdent_1351F = 1 + 1;
		end
		if ((0 - 0) == FlatIdent_1351F) then
			what = class(what);
			if isobj(cls) then
				return (classof(cls) == what) or isa(classof(cls), what);
			end
			FlatIdent_1351F = 1 + 0;
		end
	end
end
local class_informal_protocols = {};
local function class_protocols(cls)
	return coroutine.wrap(function()
		local FlatIdent_8BD63 = 1486 - (35 + 1451);
		local t;
		while true do
			if ((1453 - (28 + 1425)) == FlatIdent_8BD63) then
				for proto in citer(own(C.class_copyProtocolList(cls, nil))) do
					coroutine.yield(proto);
				end
				t = class_informal_protocols[nptr(cls)];
				FlatIdent_8BD63 = 1994 - (941 + 1052);
			end
			if (FlatIdent_8BD63 == (1 + 0)) then
				if not t then
					return;
				end
				for name, proto in pairs(t) do
					coroutine.yield(proto);
				end
				break;
			end
		end
	end);
end
local function class_conforms(cls, proto)
	local FlatIdent_D076 = 1514 - (822 + 692);
	while true do
		if (FlatIdent_D076 == (1 - 0)) then
			if proto[obf_cached_str[563]] then
				return C.class_conformsToProtocol(cls, proto) == (1 + 0);
			else
				local FlatIdent_89311 = 297 - (45 + 252);
				local t;
				while true do
					if (FlatIdent_89311 == (0 + 0)) then
						t = class_informal_protocols[nptr(cls)];
						return (t and t[proto:name()] and true) or false;
					end
				end
			end
			break;
		end
		if ((0 + 0) == FlatIdent_D076) then
			cls = class(cls);
			proto = protocol(proto);
			FlatIdent_D076 = 2 - 1;
		end
	end
end
function add_class_protocol(cls, proto, ...)
	local FlatIdent_1D765 = 433 - (114 + 319);
	while true do
		if ((0 - 0) == FlatIdent_1D765) then
			cls = class(cls);
			proto = protocol(proto);
			FlatIdent_1D765 = 1 - 0;
		end
		if (FlatIdent_1D765 == (1 + 0)) then
			if proto[obf_cached_str[566]] then
				C.class_addProtocol(class(cls), proto);
			else
				local FlatIdent_25440 = 0 - 0;
				local t;
				while true do
					if (FlatIdent_25440 == (1 - 0)) then
						t[proto:name()] = proto;
						break;
					end
					if (FlatIdent_25440 == (1963 - (556 + 1407))) then
						t = class_informal_protocols[nptr(cls)];
						if not t then
							local FlatIdent_7F9F4 = 1206 - (741 + 465);
							while true do
								if (FlatIdent_7F9F4 == (465 - (170 + 295))) then
									t = {};
									class_informal_protocols[nptr(cls)] = t;
									break;
								end
							end
						end
						FlatIdent_25440 = 1 + 0;
					end
				end
			end
			if ... then
				add_class_protocol(cls, ...);
			end
			break;
		end
	end
end
local function conforming_mtype(cls, sel)
	local FlatIdent_674F6 = 0 + 0;
	local inst;
	while true do
		if (FlatIdent_674F6 == (0 - 0)) then
			inst = not ismetaclass(cls);
			for proto in class_protocols(cls) do
				local FlatIdent_3A655 = 0 + 0;
				local mtype;
				while true do
					if (FlatIdent_3A655 == (0 + 0)) then
						mtype = proto:mtype(sel, inst, false) or proto:mtype(sel, inst, true);
						if mtype then
							return mtype;
						end
						break;
					end
				end
			end
			FlatIdent_674F6 = 1 + 0;
		end
		if (FlatIdent_674F6 == (1231 - (957 + 273))) then
			if superclass(cls) then
				return conforming_mtype(superclass(cls), sel);
			end
			break;
		end
	end
end
local function class_properties(cls)
	return citer(own(C.class_copyPropertyList(cls, nil)));
end
local function class_property(cls, name)
	return ptr(C.class_getProperty(cls, name));
end
local function class_methods(cls)
	return citer(own(C.class_copyMethodList(class(cls), nil)));
end
local function class_method(cls, sel)
	return ptr(C.class_getInstanceMethod(class(cls), selector(sel)));
end
local function class_responds(cls, sel)
	return C.class_respondsToSelector(superclass(cls), selector(sel)) == (1 + 0);
end
local callback_caller;
cbframe = false;
local cbframe_stack = {};
local function use_cbframe()
	local FlatIdent_2F94A = 0 + 0;
	while true do
		if (FlatIdent_2F94A == (0 - 0)) then
			table.insert(cbframe_stack, cbframe);
			cbframe = true;
			break;
		end
	end
end
local function stop_using_cbframe()
	cbframe = table.remove(cbframe_stack);
end
local function add_class_method(cls, sel, func, ftype)
	local FlatIdent_771FD = 0 - 0;
	local mtype;
	local imp;
	while true do
		if (FlatIdent_771FD == (11 - 7)) then
			if logtopics[obf_cached_str[578]] then
				log(obf_cached_str[579], obf_cached_str[580], class_name(cls), selector_name(sel), (ismetaclass(cls) and obf_cached_str[581]) or obf_cached_str[582], ftype_ctype(ftype, nil, true));
			end
			break;
		end
		if (FlatIdent_771FD == (0 - 0)) then
			cls = class(cls);
			sel = selector(sel);
			FlatIdent_771FD = 1781 - (389 + 1391);
		end
		if (FlatIdent_771FD == (2 + 1)) then
			if (cbframe and ftype_needs_wrapping(ftype)) then
				local FlatIdent_41770 = 0 + 0;
				local cbframe;
				local callback;
				while true do
					if (FlatIdent_41770 == (2 - 1)) then
						imp = cast(obf_cached_str[583], callback.p);
						break;
					end
					if (FlatIdent_41770 == (951 - (783 + 168))) then
						cbframe = require(obf_cached_str[585]);
						callback = cbframe.new(func);
						FlatIdent_41770 = 3 - 2;
					end
				end
			else
				local FlatIdent_6354D = 0 + 0;
				local func;
				local ct;
				local callback;
				while true do
					if (FlatIdent_6354D == (312 - (309 + 2))) then
						ct = ftype_ct(ftype, nil, true);
						callback = cast(ct, func);
						FlatIdent_6354D = 5 - 3;
					end
					if (FlatIdent_6354D == (1212 - (1090 + 122))) then
						function func(obj, sel, ...)
							return func(obj, ...);
						end
						func = callback_caller(ftype, func);
						FlatIdent_6354D = 1 + 0;
					end
					if (FlatIdent_6354D == (6 - 4)) then
						imp = cast(obf_cached_str[587], callback);
						break;
					end
				end
			end
			C.class_replaceMethod(cls, sel, imp, mtype);
			FlatIdent_771FD = 3 + 1;
		end
		if ((1119 - (628 + 490)) == FlatIdent_771FD) then
			ftype = ftype or obf_cached_str[589];
			mtype = ftype;
			FlatIdent_771FD = 1 + 1;
		end
		if ((4 - 2) == FlatIdent_771FD) then
			if (type(ftype) == obf_cached_str[590]) then
				ftype = mtype_ftype(mtype);
			else
				mtype = ftype_mtype(ftype);
			end
			imp = nil;
			FlatIdent_771FD = 13 - 10;
		end
	end
end
local function class_ivars(cls)
	return citer(own(C.class_copyIvarList(cls, nil)));
end
local function class_ivar(cls, name)
	return ptr(C.class_getInstanceVariable(cls, name));
end
local function ivar_name(ivar)
	return ffi.string(C.ivar_getName(ivar));
end
local function ivar_offset(ivar)
	return C.ivar_getOffset(ivar);
end
local function ivar_stype(ivar)
	return ffi.string(C.ivar_getTypeEncoding(ivar));
end
local function ivar_stype_ctype(stype)
	local FlatIdent_6D09C = 774 - (431 + 343);
	local stype;
	while true do
		if (FlatIdent_6D09C == (0 - 0)) then
			stype = stype:match(obf_cached_str[599]);
			return stype_ctype("^" .. stype, nil, stype:find(obf_cached_str[602]) and obf_cached_str[603]);
		end
	end
end
local function ivar_ctype(ivar)
	return ivar_stype_ctype(ivar_stype(ivar));
end
local ivar_stype_ct = memoize(function(stype)
	return ffi.typeof(ivar_stype_ctype(stype));
end);
local function ivar_ct(ivar)
	return ivar_stype_ct(ivar_stype(ivar));
end
local byteptr_ct = ffi.typeof(obf_cached_str[606]);
local function ivar_get_value(obj, name, ivar)
	return cast(ivar_ct(ivar), cast(byteptr_ct, obj) + ivar_offset(ivar))[0 - 0];
end
local function ivar_set_value(obj, name, ivar, val)
	cast(ivar_ct(ivar), cast(byteptr_ct, obj) + ivar_offset(ivar))[0 + 0] = val;
end
ffi.metatype(obf_cached_str[608], {[obf_cached_str[609]]=ivar_name,[obf_cached_str[610]]={[obf_cached_str[611]]=ivar_name,[obf_cached_str[612]]=ivar_stype,[obf_cached_str[613]]=ivar_ctype,[obf_cached_str[614]]=ivar_ct,[obf_cached_str[615]]=ivar_offset}});
local luavars = {};
local function get_luavar(obj, var)
	local FlatIdent_62AB4 = 0 + 0;
	local vars;
	while true do
		if (FlatIdent_62AB4 == (1695 - (556 + 1139))) then
			vars = luavars[nptr(obj)];
			return vars and vars[var];
		end
	end
end
local function set_luavar(obj, var, val)
	local FlatIdent_38103 = 15 - (6 + 9);
	local vars;
	while true do
		if (FlatIdent_38103 == (1 + 0)) then
			vars[var] = val;
			break;
		end
		if (FlatIdent_38103 == (0 + 0)) then
			vars = luavars[nptr(obj)];
			if not vars then
				local FlatIdent_6FC5B = 169 - (28 + 141);
				while true do
					if (FlatIdent_6FC5B == (0 + 0)) then
						vars = {};
						luavars[nptr(obj)] = vars;
						break;
					end
				end
			end
			FlatIdent_38103 = 1 - 0;
		end
	end
end
local function find_method(cls, selname)
	local FlatIdent_6D84C = 0 + 0;
	local sel;
	local meth;
	while true do
		if (FlatIdent_6D84C == (1317 - (486 + 831))) then
			sel = selector(selname);
			meth = class_method(cls, sel);
			FlatIdent_6D84C = 2 - 1;
		end
		if (FlatIdent_6D84C == (3 - 2)) then
			if meth then
				return sel, meth;
			end
			if not (selname:find("_", #selname, true) or selname:find(":", #selname, true)) then
				return find_method(cls, selname .. "_");
			end
			break;
		end
	end
end
local function find_conforming_mtype(cls, selname)
	local FlatIdent_6E9BC = 0 + 0;
	local sel;
	local mtype;
	while true do
		if ((3 - 2) == FlatIdent_6E9BC) then
			if mtype then
				return sel, mtype;
			end
			if not selname:find(obf_cached_str[622]) then
				return find_conforming_mtype(cls, selname .. "_");
			end
			break;
		end
		if (FlatIdent_6E9BC == (1263 - (668 + 595))) then
			sel = selector(selname);
			mtype = conforming_mtype(cls, sel);
			FlatIdent_6E9BC = 1 + 0;
		end
	end
end
local function get_mta(cls, sel)
	local FlatIdent_93E71 = 0 + 0;
	local mta;
	while true do
		if ((0 - 0) == FlatIdent_93E71) then
			mta = get_raw_mta(class_name(cls), selector_name(sel), not ismetaclass(cls));
			if mta then
				return mta;
			end
			FlatIdent_93E71 = 291 - (23 + 267);
		end
		if (FlatIdent_93E71 == (1946 - (1129 + 815))) then
			return get_mta(cls, sel);
		end
		if (FlatIdent_93E71 == (388 - (371 + 16))) then
			cls = superclass(cls);
			if not cls then
				return;
			end
			FlatIdent_93E71 = 1752 - (1326 + 424);
		end
	end
end
local function annotate_ftype(ftype, mta)
	local FlatIdent_18172 = 0 - 0;
	while true do
		if (FlatIdent_18172 == (0 - 0)) then
			if mta then
				for k, v in pairs(mta) do
					ftype[k] = v;
				end
			end
			return ftype;
		end
	end
end
local function method_ftype(cls, sel, method)
	local FlatIdent_132C0 = 118 - (88 + 30);
	local mta;
	while true do
		if (FlatIdent_132C0 == (772 - (720 + 51))) then
			if mta then
				return annotate_ftype(method_raw_ftype(method), mta);
			else
				return static_mtype_ftype(method_mtype(method));
			end
			break;
		end
		if ((0 - 0) == FlatIdent_132C0) then
			method = method or class_method(cls, sel);
			mta = get_mta(cls, sel);
			FlatIdent_132C0 = 1777 - (421 + 1355);
		end
	end
end
local function method_arg_ftype(cls, selname, argindex)
	local FlatIdent_53AD0 = 0 - 0;
	local sel;
	local method;
	local ftype;
	while true do
		if (FlatIdent_53AD0 == (2 + 1)) then
			return ftype, argindex;
		end
		if (FlatIdent_53AD0 == (1083 - (286 + 797))) then
			check(argindex, obf_cached_str[624]);
			sel, method = find_method(cls, selname);
			FlatIdent_53AD0 = 3 - 2;
		end
		if (FlatIdent_53AD0 == (2 - 0)) then
			argindex = argindex or (440 - (397 + 42));
			argindex = ((argindex == obf_cached_str[625]) and argindex) or (argindex + 1 + 1);
			FlatIdent_53AD0 = 803 - (24 + 776);
		end
		if ((1 - 0) == FlatIdent_53AD0) then
			if not sel then
				return;
			end
			ftype = method_ftype(cls, sel, method);
			FlatIdent_53AD0 = 787 - (222 + 563);
		end
	end
end
local refcounts = {};
local function inc_refcount(obj, n)
	local FlatIdent_51060 = 0 - 0;
	local refcount;
	while true do
		if ((1 + 0) == FlatIdent_51060) then
			refcounts[nptr(obj)] = ((refcount ~= (190 - (23 + 167))) and refcount) or nil;
			return refcount;
		end
		if (FlatIdent_51060 == (1798 - (690 + 1108))) then
			refcount = (refcounts[nptr(obj)] or (0 + 0)) + n;
			assert(refcount >= (0 + 0), obf_cached_str[626]);
			FlatIdent_51060 = 849 - (40 + 808);
		end
	end
end
local function release_object(obj)
	if (inc_refcount(obj, -(1 + 0)) == (0 - 0)) then
		luavars[nptr(obj)] = nil;
	end
end
local function collect_object(obj)
	obj:release();
end
noretain = {[obf_cached_str[628]]=(1 + 0),[obf_cached_str[629]]=(1 + 0),[obf_cached_str[630]]=(1 + 0),[obf_cached_str[631]]=(572 - (47 + 524)),[obf_cached_str[632]]=(1 + 0),[obf_cached_str[633]]=(2 - 1),[obf_cached_str[634]]=(1 - 0)};
local method_caller = memoize2(function(cls, selname)
	local FlatIdent_23522 = 0 - 0;
	local sel;
	local method;
	local ftype;
	local ct;
	local func;
	local can_retain;
	local is_release;
	local log_refcount;
	while true do
		if (FlatIdent_23522 == (1726 - (1165 + 561))) then
			sel, method = find_method(cls, selname);
			if not sel then
				return;
			end
			ftype = method_ftype(cls, sel, method);
			FlatIdent_23522 = 1 + 0;
		end
		if (FlatIdent_23522 == (6 - 4)) then
			func = function_caller(ftype, func);
			can_retain = not noretain[selname];
			is_release = (selname == obf_cached_str[635]) or (selname == obf_cached_str[636]);
			FlatIdent_23522 = 2 + 1;
		end
		if (FlatIdent_23522 == (482 - (341 + 138))) then
			log_refcount = (is_release or (selname == obf_cached_str[637])) and logtopics[obf_cached_str[638]];
			return function(obj, ...)
				local FlatIdent_413A0 = 0 + 0;
				local before_rc;
				local after_rc;
				local objstr;
				local before_luarc;
				local after_luarc;
				local ok;
				local ret;
				while true do
					if (FlatIdent_413A0 == (1 - 0)) then
						ok, ret = xpcall(func, debug.traceback, obj, sel, ...);
						if not ok then
							check(false, obf_cached_str[640], tostring(cls), tostring(sel), ret);
						end
						FlatIdent_413A0 = 328 - (89 + 237);
					end
					if (FlatIdent_413A0 == (9 - 6)) then
						return ret;
					end
					if (FlatIdent_413A0 == (0 - 0)) then
						before_rc, after_rc, objstr, before_luarc, after_luarc = nil;
						if log_refcount then
							local FlatIdent_8C93D = 881 - (581 + 300);
							while true do
								if (FlatIdent_8C93D == (1221 - (855 + 365))) then
									before_luarc = inc_refcount(obj, 0 - 0);
									break;
								end
								if ((0 + 0) == FlatIdent_8C93D) then
									objstr = tostring(obj);
									before_rc = tonumber(obj:retainCount());
									FlatIdent_8C93D = 1236 - (1030 + 205);
								end
							end
						end
						FlatIdent_413A0 = 1 + 0;
					end
					if (FlatIdent_413A0 == (2 + 0)) then
						if is_release then
							local FlatIdent_36690 = 286 - (156 + 130);
							while true do
								if (FlatIdent_36690 == (0 - 0)) then
									ffi.gc(obj, nil);
									release_object(obj);
									FlatIdent_36690 = 1 - 0;
								end
								if (FlatIdent_36690 == (1 - 0)) then
									if (before_rc == (1 + 0)) then
										after_rc = 0 + 0;
									end
									break;
								end
							end
						elseif isobj(ret) then
							if can_retain then
								ret = ret:retain();
							else
								local FlatIdent_39734 = 69 - (10 + 59);
								while true do
									if (FlatIdent_39734 == (0 + 0)) then
										ffi.gc(ret, collect_object);
										inc_refcount(ret, 4 - 3);
										break;
									end
								end
							end
						end
						if log_refcount then
							local FlatIdent_1A0B9 = 1163 - (671 + 492);
							while true do
								if (FlatIdent_1A0B9 == (1 + 0)) then
									log(obf_cached_str[645], obf_cached_str[646], objstr, before_luarc, after_luarc, before_rc, after_rc);
									break;
								end
								if (FlatIdent_1A0B9 == (1215 - (369 + 846))) then
									after_rc = after_rc or tonumber(obj:retainCount());
									after_luarc = inc_refcount(obj, 0 + 0);
									FlatIdent_1A0B9 = 1 + 0;
								end
							end
						end
						FlatIdent_413A0 = 1948 - (1036 + 909);
					end
				end
			end;
		end
		if (FlatIdent_23522 == (1 + 0)) then
			ct = ftype_ct(ftype);
			func = method_imp(method);
			func = cast(ct, func);
			FlatIdent_23522 = 2 - 0;
		end
	end
end);
local function override(cls, selname, func, ftype)
	local FlatIdent_5C5DB = 203 - (11 + 192);
	local sel;
	local method;
	local mtype;
	while true do
		if (FlatIdent_5C5DB == (2 + 0)) then
			cls = metaclass(cls);
			if cls then
				return override(cls, selname, func, ftype);
			end
			break;
		end
		if (FlatIdent_5C5DB == (176 - (135 + 40))) then
			sel, mtype = find_conforming_mtype(cls, selname);
			if sel then
				local FlatIdent_2789B = 0 - 0;
				while true do
					if (FlatIdent_2789B == (1 + 0)) then
						return true;
					end
					if (FlatIdent_2789B == (0 - 0)) then
						ftype = ftype or static_mtype_ftype(mtype);
						add_class_method(cls, sel, func, ftype);
						FlatIdent_2789B = 1 - 0;
					end
				end
			end
			FlatIdent_5C5DB = 178 - (50 + 126);
		end
		if (FlatIdent_5C5DB == (0 - 0)) then
			sel, method = find_method(cls, selname);
			if sel then
				local FlatIdent_91215 = 0 + 0;
				while true do
					if (FlatIdent_91215 == (1414 - (1233 + 180))) then
						return true;
					end
					if (FlatIdent_91215 == (969 - (522 + 447))) then
						ftype = ftype or method_ftype(cls, sel, method);
						add_class_method(cls, sel, func, ftype);
						FlatIdent_91215 = 1422 - (107 + 1314);
					end
				end
			end
			FlatIdent_5C5DB = 1 + 0;
		end
	end
end
local function callsuper(obj, selname, ...)
	local FlatIdent_35814 = 0 - 0;
	local super;
	while true do
		if (FlatIdent_35814 == (1 + 0)) then
			return method_caller(super, selname)(obj, ...);
		end
		if (FlatIdent_35814 == (0 - 0)) then
			super = superclass(obj);
			if not super then
				return;
			end
			FlatIdent_35814 = 3 - 2;
		end
	end
end
local function swizzle(cls, selname1, selname2, func)
	local FlatIdent_4965B = 1910 - (716 + 1194);
	local sel1;
	local method1;
	local sel2;
	local method2;
	while true do
		if (FlatIdent_4965B == (1 + 0)) then
			sel2, method2 = find_method(cls, selname2);
			if not sel1 then
				local FlatIdent_39DD3 = 0 + 0;
				while true do
					if (FlatIdent_39DD3 == (503 - (74 + 429))) then
						cls = metaclass(cls);
						if cls then
							return swizzle(cls, selname1, selname2, func);
						else
							check(false, obf_cached_str[648], selname1);
						end
						break;
					end
				end
			end
			FlatIdent_4965B = 3 - 1;
		end
		if ((0 + 0) == FlatIdent_4965B) then
			cls = class(cls);
			sel1, method1 = find_method(cls, selname1);
			FlatIdent_4965B = 2 - 1;
		end
		if (FlatIdent_4965B == (2 + 0)) then
			if not sel2 then
				local FlatIdent_654E4 = 0 - 0;
				local ftype;
				while true do
					if (FlatIdent_654E4 == (2 - 1)) then
						sel2 = selector(selname2);
						add_class_method(cls, sel2, func, ftype);
						FlatIdent_654E4 = 435 - (279 + 154);
					end
					if ((780 - (454 + 324)) == FlatIdent_654E4) then
						method2 = class_method(cls, sel2);
						assert(method2);
						break;
					end
					if (FlatIdent_654E4 == (0 + 0)) then
						check(func, obf_cached_str[649]);
						ftype = method_ftype(cls, sel1, method1);
						FlatIdent_654E4 = 18 - (12 + 5);
					end
				end
			else
				check(not func, obf_cached_str[650]);
			end
			method1:exchange_imp(method2);
			break;
		end
	end
end
local function get_class_field(cls, field)
	local FlatIdent_179D7 = 0 + 0;
	local val;
	local prop;
	local meth;
	while true do
		if (FlatIdent_179D7 == (7 - 4)) then
			if meth then
				return meth;
			end
			cls = superclass(cls);
			FlatIdent_179D7 = 2 + 2;
		end
		if ((1095 - (277 + 816)) == FlatIdent_179D7) then
			if prop then
				local FlatIdent_67611 = 0 - 0;
				local caller;
				while true do
					if (FlatIdent_67611 == (1183 - (1058 + 125))) then
						caller = method_caller(metaclass(cls), property_getter(prop));
						if caller then
							return caller(cls);
						end
						break;
					end
				end
			end
			meth = method_caller(metaclass(cls), field);
			FlatIdent_179D7 = 1 + 2;
		end
		if (FlatIdent_179D7 == (979 - (815 + 160))) then
			while cls do
				local FlatIdent_5BFFE = 0 - 0;
				local val;
				while true do
					if (FlatIdent_5BFFE == (2 - 1)) then
						cls = superclass(cls);
						break;
					end
					if (FlatIdent_5BFFE == (0 + 0)) then
						val = get_luavar(cls, field);
						if (val ~= nil) then
							return val;
						end
						FlatIdent_5BFFE = 2 - 1;
					end
				end
			end
			break;
		end
		if (FlatIdent_179D7 == (1898 - (41 + 1857))) then
			assert(cls ~= nil, obf_cached_str[652]);
			val = get_luavar(cls, field);
			FlatIdent_179D7 = 1894 - (1222 + 671);
		end
		if (FlatIdent_179D7 == (2 - 1)) then
			if (val ~= nil) then
				return val;
			end
			prop = class_property(cls, field);
			FlatIdent_179D7 = 2 - 0;
		end
	end
end
local function set_existing_class_field(cls, field, val)
	local FlatIdent_65565 = 1182 - (229 + 953);
	local prop;
	while true do
		if (FlatIdent_65565 == (1775 - (1111 + 663))) then
			if prop then
				local FlatIdent_D7F6 = 1579 - (874 + 705);
				local setter;
				while true do
					if (FlatIdent_D7F6 == (0 + 0)) then
						setter = property_setter(prop);
						if setter then
							local FlatIdent_42111 = 0 + 0;
							local caller;
							while true do
								if (FlatIdent_42111 == (0 - 0)) then
									caller = method_caller(metaclass(cls), setter);
									if caller then
										local FlatIdent_77FC3 = 0 + 0;
										while true do
											if (FlatIdent_77FC3 == (679 - (642 + 37))) then
												caller(cls, val);
												return true;
											end
										end
									end
									break;
								end
							end
						end
						break;
					end
				end
			end
			if override(cls, field, val) then
				return true;
			end
			FlatIdent_65565 = 1 + 1;
		end
		if (FlatIdent_65565 == (0 + 0)) then
			if (get_luavar(cls, field) ~= nil) then
				local FlatIdent_53FA2 = 0 - 0;
				while true do
					if (FlatIdent_53FA2 == (454 - (233 + 221))) then
						set_luavar(cls, field, val);
						return true;
					end
				end
			end
			prop = class_property(cls, field);
			FlatIdent_65565 = 2 - 1;
		end
		if (FlatIdent_65565 == (2 + 0)) then
			cls = superclass(cls);
			while cls do
				local FlatIdent_4E54D = 1541 - (718 + 823);
				while true do
					if (FlatIdent_4E54D == (0 + 0)) then
						if (get_luavar(cls, field) ~= nil) then
							local FlatIdent_5FFF = 805 - (266 + 539);
							while true do
								if (FlatIdent_5FFF == (0 - 0)) then
									set_luavar(cls, field, val);
									return true;
								end
							end
						end
						cls = superclass(cls);
						break;
					end
				end
			end
			break;
		end
	end
end
local function set_class_field(cls, field, val)
	local FlatIdent_415E2 = 1225 - (636 + 589);
	while true do
		if ((2 - 1) == FlatIdent_415E2) then
			set_luavar(cls, field, val);
			break;
		end
		if ((0 - 0) == FlatIdent_415E2) then
			assert(cls ~= nil, obf_cached_str[653]);
			if set_existing_class_field(cls, field, val) then
				return;
			end
			FlatIdent_415E2 = 1 + 0;
		end
	end
end
ffi.metatype(obf_cached_str[655], {[obf_cached_str[656]]=class_name,[obf_cached_str[657]]=get_class_field,[obf_cached_str[658]]=set_class_field});
local function get_instance_field(obj, field)
	local FlatIdent_5E338 = 0 + 0;
	local val;
	local cls;
	local prop;
	local ivar;
	local caller;
	while true do
		if (FlatIdent_5E338 == (1016 - (657 + 358))) then
			prop = class_property(cls, field);
			if prop then
				local FlatIdent_28BB6 = 0 - 0;
				local caller;
				while true do
					if (FlatIdent_28BB6 == (0 - 0)) then
						caller = method_caller(cls, property_getter(prop));
						if caller then
							return caller(obj);
						end
						break;
					end
				end
			end
			ivar = class_ivar(cls, field);
			if ivar then
				return ivar_get_value(obj, field, ivar);
			end
			FlatIdent_5E338 = 1189 - (1151 + 36);
		end
		if (FlatIdent_5E338 == (0 + 0)) then
			assert(obj ~= nil, obf_cached_str[659]);
			val = get_luavar(obj, field);
			if (val ~= nil) then
				return val;
			end
			cls = classof(obj);
			FlatIdent_5E338 = 1 + 0;
		end
		if (FlatIdent_5E338 == (5 - 3)) then
			caller = method_caller(cls, field);
			if caller then
				return caller;
			end
			return get_class_field(cls, field);
		end
	end
end
local function set_instance_field(obj, field, val)
	local FlatIdent_57FA = 1832 - (1552 + 280);
	local cls;
	local prop;
	local ivar;
	while true do
		if ((838 - (64 + 770)) == FlatIdent_57FA) then
			set_luavar(obj, field, val);
			break;
		end
		if (FlatIdent_57FA == (3 + 0)) then
			if ivar then
				local FlatIdent_7B716 = 0 - 0;
				while true do
					if (FlatIdent_7B716 == (0 + 0)) then
						ivar_set_value(obj, field, ivar, val);
						return;
					end
				end
			end
			if set_existing_class_field(cls, field, val) then
				return;
			end
			FlatIdent_57FA = 1247 - (157 + 1086);
		end
		if (FlatIdent_57FA == (1 - 0)) then
			cls = classof(obj);
			prop = class_property(cls, field);
			FlatIdent_57FA = 8 - 6;
		end
		if (FlatIdent_57FA == (2 - 0)) then
			if prop then
				local FlatIdent_8585F = 0 - 0;
				local setter;
				while true do
					if ((819 - (599 + 220)) == FlatIdent_8585F) then
						setter = property_setter(prop);
						if setter then
							local FlatIdent_51A3C = 0 - 0;
							local caller;
							while true do
								if (FlatIdent_51A3C == (1931 - (1813 + 118))) then
									caller = method_caller(cls, setter);
									if caller then
										local FlatIdent_4D7AE = 0 + 0;
										while true do
											if (FlatIdent_4D7AE == (1217 - (841 + 376))) then
												caller(obj, val);
												return;
											end
										end
									end
									break;
								end
							end
						else
							check(false, 'attempt to write to read/only property "%s"', field);
						end
						break;
					end
				end
			end
			ivar = class_ivar(cls, field);
			FlatIdent_57FA = 3 - 0;
		end
		if (FlatIdent_57FA == (0 + 0)) then
			assert(obj ~= nil, obf_cached_str[661]);
			if (get_luavar(obj, field) ~= nil) then
				local FlatIdent_91CC3 = 0 - 0;
				while true do
					if (FlatIdent_91CC3 == (859 - (464 + 395))) then
						set_luavar(obj, field, val);
						return;
					end
				end
			end
			FlatIdent_57FA = 2 - 1;
		end
	end
end
local object_tostring;
if (ffi.sizeof(intptr_ct) > (2 + 2)) then
	function object_tostring(obj)
		local FlatIdent_5CB64 = 837 - (467 + 370);
		local i;
		local lo;
		local hi;
		while true do
			if (FlatIdent_5CB64 == (1 - 0)) then
				lo = tonumber(i % ((2 + 0) ^ (109 - 77)));
				hi = math.floor(tonumber(i / ((1 + 1) ^ (74 - 42))));
				FlatIdent_5CB64 = 522 - (150 + 370);
			end
			if (FlatIdent_5CB64 == (1284 - (74 + 1208))) then
				return _(obf_cached_str[664], class_name(obj), ((hi ~= (0 - 0)) and _(obf_cached_str[665], hi, lo)) or _(obf_cached_str[666], lo));
			end
			if ((0 - 0) == FlatIdent_5CB64) then
				if (obj == nil) then
					return obf_cached_str[667];
				end
				i = cast(obf_cached_str[668], obj);
				FlatIdent_5CB64 = 1 + 0;
			end
		end
	end
else
	function object_tostring(obj)
		local FlatIdent_4FF01 = 390 - (14 + 376);
		while true do
			if (FlatIdent_4FF01 == (0 - 0)) then
				if (obj == nil) then
					return obf_cached_str[669];
				end
				return _(obf_cached_str[670], class_name(obj), tonumber(cast(obf_cached_str[671], obj)));
			end
		end
	end
end
ffi.metatype(obf_cached_str[673], {[obf_cached_str[674]]=object_tostring,[obf_cached_str[675]]=get_instance_field,[obf_cached_str[676]]=set_instance_field});
ffi.cdef([[
typedef void (*dispose_helper_t) (void *src);
typedef void (*copy_helper_t)    (void *dst, void *src);

struct block_descriptor {
	unsigned long int reserved;         // NULL
	unsigned long int size;             // sizeof(struct block_literal)
	copy_helper_t     copy_helper;      // IFF (1<<25)
	dispose_helper_t  dispose_helper;   // IFF (1<<25)
};

struct block_literal {
	struct block_literal *isa;
	int flags;
	int reserved;
	void *invoke;
	struct block_descriptor *descriptor;
	struct block_descriptor d; // because they come in pairs
};

struct block_literal *_NSConcreteGlobalBlock;
struct block_literal *_NSConcreteStackBlock;
]]);
local voidptr_ct = ffi.typeof(obf_cached_str[680]);
local block_ct = ffi.typeof(obf_cached_str[682]);
local copy_helper_ct = ffi.typeof(obf_cached_str[684]);
local dispose_helper_ct = ffi.typeof(obf_cached_str[686]);
local function block(func, ftype)
	local FlatIdent_6626A = 0 + 0;
	local callback;
	local callback_ptr;
	local refcount;
	local copy;
	local block;
	local copy_callback;
	local dispose_callback;
	local dispose;
	local block_object;
	while true do
		if (FlatIdent_6626A == (0 + 0)) then
			if isobj(func) then
				return func;
			end
			ftype = ftype or {"v"};
			if (type(ftype) == obf_cached_str[688]) then
				ftype = mtype_ftype(ftype);
			end
			FlatIdent_6626A = 2 - 1;
		end
		if (FlatIdent_6626A == (1 + 0)) then
			if not ftype[obf_cached_str[689]] then
				local FlatIdent_7E24D = 78 - (23 + 55);
				while true do
					if (FlatIdent_7E24D == (0 - 0)) then
						ftype[obf_cached_str[690]] = true;
						table.insert(ftype, 1 + 0, obf_cached_str[692]);
						break;
					end
				end
			end
			callback, callback_ptr = nil;
			if (cbframe and ftype_needs_wrapping(ftype)) then
				local FlatIdent_57C9C = 0 + 0;
				local cbframe;
				while true do
					if (FlatIdent_57C9C == (1 - 0)) then
						callback_ptr = callback['p'];
						break;
					end
					if (FlatIdent_57C9C == (0 + 0)) then
						cbframe = require(obf_cached_str[694]);
						callback = cbframe.new(func);
						FlatIdent_57C9C = 902 - (652 + 249);
					end
				end
			else
				local FlatIdent_8A0A6 = 0 - 0;
				local func;
				local caller;
				local ct;
				while true do
					if (FlatIdent_8A0A6 == (1870 - (708 + 1160))) then
						callback = cast(ct, caller);
						callback_ptr = callback;
						break;
					end
					if (FlatIdent_8A0A6 == (0 - 0)) then
						func = callback_caller(ftype, func);
						caller = nil;
						FlatIdent_8A0A6 = 1 - 0;
					end
					if (FlatIdent_8A0A6 == (28 - (10 + 17))) then
						function caller(block, ...)
							return func(...);
						end
						ct = ftype_ct(ftype, nil, true);
						FlatIdent_8A0A6 = 1 + 1;
					end
				end
			end
			FlatIdent_6626A = 1734 - (1400 + 332);
		end
		if (FlatIdent_6626A == (7 - 3)) then
			dispose = nil;
			function dispose(src)
				local FlatIdent_4A232 = 1908 - (242 + 1666);
				while true do
					if (FlatIdent_4A232 == (0 + 0)) then
						refcount = refcount - (1 + 0);
						if (refcount == (0 + 0)) then
							local FlatIdent_30DDB = 940 - (850 + 90);
							while true do
								if (FlatIdent_30DDB == (0 - 0)) then
									block = nil;
									callback:free();
									FlatIdent_30DDB = 1391 - (360 + 1030);
								end
								if (FlatIdent_30DDB == (1 + 0)) then
									copy_callback:free();
									dispose_callback:free();
									break;
								end
							end
						end
						FlatIdent_4A232 = 2 - 1;
					end
					if ((1 - 0) == FlatIdent_4A232) then
						log(obf_cached_str[699], "dispose\trefcount: %-8d", refcount);
						assert(refcount >= (1661 - (909 + 752)));
						break;
					end
				end
			end
			copy_callback = cast(copy_helper_ct, copy);
			FlatIdent_6626A = 1228 - (109 + 1114);
		end
		if (FlatIdent_6626A == (16 - 7)) then
			ffi.gc(block_object, dispose);
			log(obf_cached_str[702], "create\trefcount: %-8d", refcount);
			return block_object;
		end
		if ((3 + 4) == FlatIdent_6626A) then
			block[obf_cached_str[704]] = block['d'];
			block['d'][obf_cached_str[707]] = 242 - (6 + 236);
			block['d'][obf_cached_str[709]] = ffi.sizeof(block_ct);
			FlatIdent_6626A = 6 + 2;
		end
		if (FlatIdent_6626A == (7 + 1)) then
			block['d'][obf_cached_str[712]] = copy_callback;
			block['d'][obf_cached_str[714]] = dispose_callback;
			block_object = cast(id_ct, block);
			FlatIdent_6626A = 20 - 11;
		end
		if (FlatIdent_6626A == (4 - 1)) then
			block = nil;
			copy_callback = nil;
			dispose_callback = nil;
			FlatIdent_6626A = 1137 - (1076 + 57);
		end
		if (FlatIdent_6626A == (1 + 5)) then
			block[obf_cached_str[715]] = (691 - (579 + 110)) ^ (2 + 23);
			block[obf_cached_str[716]] = 0 + 0;
			block[obf_cached_str[717]] = cast(voidptr_ct, callback_ptr);
			FlatIdent_6626A = 4 + 3;
		end
		if ((412 - (174 + 233)) == FlatIdent_6626A) then
			dispose_callback = cast(dispose_helper_ct, dispose);
			block = block_ct();
			block[obf_cached_str[718]] = C[obf_cached_str[719]];
			FlatIdent_6626A = 16 - 10;
		end
		if (FlatIdent_6626A == (3 - 1)) then
			refcount = 1 + 0;
			copy = nil;
			function copy(dst, src)
				local FlatIdent_74083 = 1174 - (663 + 511);
				while true do
					if (FlatIdent_74083 == (1 + 0)) then
						assert(refcount >= (1 + 1));
						break;
					end
					if (FlatIdent_74083 == (0 - 0)) then
						refcount = refcount + 1 + 0;
						log(obf_cached_str[720], "copy\trefcount: %-8d", refcount);
						FlatIdent_74083 = 2 - 1;
					end
				end
			end
			FlatIdent_6626A = 7 - 4;
		end
	end
end
local function toobj(v)
	if (type(v) == obf_cached_str[722]) then
		return objc[obf_cached_str[723]]:numberWithDouble(v);
	elseif (type(v) == obf_cached_str[725]) then
		return objc[obf_cached_str[726]]:stringWithUTF8String(v);
	elseif (type(v) == obf_cached_str[728]) then
		if (#v == (0 + 0)) then
			local FlatIdent_792A9 = 0 - 0;
			local dic;
			while true do
				if (FlatIdent_792A9 == (0 + 0)) then
					dic = objc[obf_cached_str[729]]:dictionary();
					for k, v in pairs(v) do
						dic:setObject_forKey(toobj(v), toobj(k));
					end
					FlatIdent_792A9 = 1 + 0;
				end
				if (FlatIdent_792A9 == (723 - (478 + 244))) then
					return dic;
				end
			end
		else
			local FlatIdent_849C1 = 517 - (440 + 77);
			local arr;
			while true do
				if (FlatIdent_849C1 == (1 + 0)) then
					return arr;
				end
				if (FlatIdent_849C1 == (0 - 0)) then
					arr = objc[obf_cached_str[732]]:array();
					for i, v in ipairs(v) do
						arr:addObject(toobj(v));
					end
					FlatIdent_849C1 = 1557 - (655 + 901);
				end
			end
		end
	elseif (type(v) == obf_cached_str[735]) then
		return objc[obf_cached_str[736]]:numberWithBool(v);
	elseif isclass(v) then
		return cast(id_ct, v);
	else
		return v;
	end
end
local function get_obj_count(obj)
	local count = obj[obf_cached_str[738]];
	if (type(count) == obf_cached_str[739]) then
		return count(obj);
	else
		return count;
	end
end
local function tolua(obj)
	if (isa(obj, objc.NSNumber) and (ffi.string(obj.objCType) ~= "c")) then
		return obj[obf_cached_str[744]];
	elseif (isa(obj, objc.NSNumber) and (ffi.string(obj.objCType) == "c")) then
		return obj[obf_cached_str[749]];
	elseif isa(obj, objc.NSString) then
		return obj[obf_cached_str[751]];
	elseif isa(obj, objc.NSDictionary) then
		local FlatIdent_9F31 = 0 + 0;
		local t;
		local count;
		local vals;
		local keys;
		while true do
			if (FlatIdent_9F31 == (2 + 0)) then
				obj:getObjects_andKeys(vals, keys);
				for i = 0 + 0, count - (3 - 2) do
					t[tolua(keys[i])] = tolua(vals[i]);
				end
				FlatIdent_9F31 = 1448 - (695 + 750);
			end
			if (FlatIdent_9F31 == (3 - 2)) then
				vals = ffi.new(obf_cached_str[755], count);
				keys = ffi.new(obf_cached_str[757], count);
				FlatIdent_9F31 = 2 - 0;
			end
			if (FlatIdent_9F31 == (0 - 0)) then
				t = {};
				count = tonumber(get_obj_count(obj));
				FlatIdent_9F31 = 352 - (285 + 66);
			end
			if (FlatIdent_9F31 == (6 - 3)) then
				return t;
			end
		end
	elseif isa(obj, objc.NSArray) then
		local FlatIdent_58F21 = 1310 - (682 + 628);
		local t;
		while true do
			if (FlatIdent_58F21 == (1 + 0)) then
				return t;
			end
			if (FlatIdent_58F21 == (299 - (176 + 123))) then
				t = {};
				for i = 0 + 0, tonumber(get_obj_count(obj)) - (1 + 0) do
					t[#t + (270 - (239 + 30))] = tolua(obj:objectAtIndex(i));
				end
				FlatIdent_58F21 = 1 + 0;
			end
		end
	else
		return obj;
	end
end
local function convert_fp_arg(ftype, arg)
	local FlatIdent_48494 = 0 + 0;
	while true do
		if (FlatIdent_48494 == (0 - 0)) then
			if (type(arg) ~= obf_cached_str[760]) then
				return arg;
			end
			if ftype[obf_cached_str[761]] then
				return block(arg, ftype);
			else
				local FlatIdent_5F20A = 0 - 0;
				local ct;
				while true do
					if (FlatIdent_5F20A == (315 - (306 + 9))) then
						ct = ftype_ct(ftype, nil, true);
						return cast(ct, arg);
					end
				end
			end
			break;
		end
	end
end
local function convert_arg(ftype, i, arg)
	local FlatIdent_4ADD0 = 0 - 0;
	local argtype;
	while true do
		if (FlatIdent_4ADD0 == (0 + 0)) then
			argtype = ftype[i];
			if (argtype == ":") then
				return selector(arg);
			elseif (argtype == "#") then
				return class(arg);
			elseif (argtype == "@") then
				return toobj(arg);
			elseif (ftype[obf_cached_str[765]] and ftype[obf_cached_str[766]][i]) then
				return convert_fp_arg(ftype[obf_cached_str[767]][i], arg);
			else
				return arg;
			end
			break;
		end
	end
end
local function convert_args(ftype, i, ...)
	local FlatIdent_782B8 = 0 + 0;
	while true do
		if (FlatIdent_782B8 == (0 + 0)) then
			if (select("#", ...) == (0 - 0)) then
				return;
			end
			return convert_arg(ftype, i, ...), convert_args(ftype, i + (1376 - (1140 + 235)), select(2 + 0, ...));
		end
	end
end
local function toarg(cls, selname, argindex, arg)
	local FlatIdent_4C11 = 0 + 0;
	local ftype;
	local argindex;
	while true do
		if ((1 + 0) == FlatIdent_4C11) then
			return convert_arg(ftype, argindex, arg);
		end
		if (FlatIdent_4C11 == (52 - (33 + 19))) then
			ftype, argindex = method_arg_ftype(cls, selname, argindex);
			if not ftype then
				return;
			end
			FlatIdent_4C11 = 1 + 0;
		end
	end
end
local function convert_ret(ftype, ret)
	if (ret == nil) then
		return nil;
	elseif (ftype[obf_cached_str[769]] == "B") then
		return ret == (2 - 1);
	elseif ((ftype[obf_cached_str[771]] == "*") or (ftype[obf_cached_str[773]] == obf_cached_str[774])) then
		return ffi.string(ret);
	else
		return ret;
	end
end
function function_caller(ftype, func)
	if (#ftype == (0 + 0)) then
		return function()
			return convert_ret(ftype, func());
		end;
	elseif (#ftype == (1 - 0)) then
		return function(arg)
			return convert_ret(ftype, func(convert_arg(ftype, 1 + 0, arg)));
		end;
	elseif ((#ftype == (691 - (586 + 103))) and (ftype[1 + 0] == "@") and (ftype[5 - 3] == ":")) then
		return function(arg1, arg2)
			return convert_ret(ftype, func(toobj(arg1), selector(arg2)));
		end;
	elseif ((#ftype == (1491 - (1309 + 179))) and (ftype[1 - 0] == "@") and (ftype[1 + 1] == ":")) then
		return function(arg1, arg2, arg3)
			return convert_ret(ftype, func(toobj(arg1), selector(arg2), convert_arg(ftype, 7 - 4, arg3)));
		end;
	else
		return function(...)
			return convert_ret(ftype, func(convert_args(ftype, 1 + 0, ...)));
		end;
	end
end
local function convert_cb_fp_arg(ftype, arg)
	if ftype[obf_cached_str[780]] then
		return arg;
	else
		return cast(ftype_ct(ftype), arg);
	end
end
local function convert_cb_arg(ftype, i, arg)
	if (ftype[obf_cached_str[781]] and ftype[obf_cached_str[782]][i]) then
		return convert_cb_fp_arg(ftype[obf_cached_str[783]][i], arg);
	else
		return arg;
	end
end
local function convert_cb_args(ftype, i, ...)
	local FlatIdent_7C0B1 = 0 - 0;
	while true do
		if (FlatIdent_7C0B1 == (0 - 0)) then
			if (select("#", ...) == (609 - (295 + 314))) then
				return;
			end
			return convert_cb_arg(ftype, i, ...), convert_cb_args(ftype, i + (2 - 1), select(1964 - (1300 + 662), ...));
		end
	end
end
function callback_caller(ftype, func)
	local FlatIdent_8DDE4 = 0 - 0;
	while true do
		if ((1755 - (1178 + 577)) == FlatIdent_8DDE4) then
			if not ftype[obf_cached_str[785]] then
				if (ftype[obf_cached_str[786]] == "@") then
					return function(...)
						return toobj(func(...));
					end;
				else
					return func;
				end
			end
			return function(...)
				local FlatIdent_103F0 = 0 + 0;
				local ret;
				while true do
					if ((0 - 0) == FlatIdent_103F0) then
						ret = func(convert_cb_args(ftype, 1406 - (851 + 554), ...));
						if (ftype[obf_cached_str[788]] == "@") then
							return toobj(ret);
						else
							return ret;
						end
						break;
					end
				end
			end;
		end
	end
end
local function array_next(arr, i)
	local FlatIdent_2E846 = 0 + 0;
	while true do
		if (FlatIdent_2E846 == (0 - 0)) then
			if (i >= get_obj_count(arr)) then
				return;
			end
			return i + (1 - 0), arr:objectAtIndex(i);
		end
	end
end
local function array_ipairs(arr)
	return array_next, arr, 302 - (115 + 187);
end
local function objc_protocols(cls)
	if not cls then
		return protocols();
	else
		return class_protocols(cls);
	end
end
objc['C'] = C;
objc[obf_cached_str[792]] = P;
objc[obf_cached_str[793]] = use_cbframe;
objc[obf_cached_str[794]] = stop_using_cbframe;
objc[obf_cached_str[795]] = add_function;
objc[obf_cached_str[796]] = add_informal_protocol;
objc[obf_cached_str[797]] = add_informal_protocol_method;
objc[obf_cached_str[798]] = load_framework;
objc[obf_cached_str[799]] = searchpaths;
objc[obf_cached_str[800]] = memoize;
objc[obf_cached_str[801]] = find_framework;
objc[obf_cached_str[802]] = stype_ctype;
objc[obf_cached_str[803]] = mtype_ftype;
objc[obf_cached_str[804]] = ftype_ctype;
objc[obf_cached_str[805]] = ctype_ct;
objc[obf_cached_str[806]] = ftype_ct;
objc[obf_cached_str[807]] = method_ftype;
objc[obf_cached_str[808]] = selector;
objc[obf_cached_str[809]] = objc_protocols;
objc[obf_cached_str[810]] = protocol;
objc[obf_cached_str[811]] = classes;
objc[obf_cached_str[812]] = isclass;
objc[obf_cached_str[813]] = isobj;
objc[obf_cached_str[814]] = ismetaclass;
objc[obf_cached_str[815]] = class;
objc[obf_cached_str[816]] = class_name;
objc[obf_cached_str[817]] = superclass;
objc[obf_cached_str[818]] = metaclass;
objc[obf_cached_str[819]] = isa;
objc[obf_cached_str[820]] = class_conforms;
objc[obf_cached_str[821]] = class_properties;
objc[obf_cached_str[822]] = class_property;
objc[obf_cached_str[823]] = class_methods;
objc[obf_cached_str[824]] = class_method;
objc[obf_cached_str[825]] = class_responds;
objc[obf_cached_str[826]] = class_ivars;
objc[obf_cached_str[827]] = class_ivar;
objc[obf_cached_str[828]] = add_class_protocol;
objc[obf_cached_str[829]] = toarg;
objc[obf_cached_str[830]] = override;
objc[obf_cached_str[831]] = add_class_method;
objc[obf_cached_str[832]] = swizzle;
objc.caller = function(cls, selname)
	return method_caller(class(cls), tostring(selname)) or method_caller(metaclass(cls), tostring(selname));
end;
objc[obf_cached_str[834]] = callsuper;
objc[obf_cached_str[835]] = block;
objc[obf_cached_str[836]] = toobj;
objc[obf_cached_str[837]] = tolua;
objc[obf_cached_str[838]] = nptr;
objc[obf_cached_str[839]] = array_ipairs;
local submodules = {[obf_cached_str[840]]=obf_cached_str[841],[obf_cached_str[842]]=obf_cached_str[843]};
local function autoload(k)
	return submodules[k] and require(submodules[k]) and objc[k];
end
setmetatable(objc, {[obf_cached_str[844]]=function(t, k)
	return class(k) or csymbol(k) or autoload(k);
end,[obf_cached_str[845]]=submodules});
if not ... then
	for k, v in pairs(objc) do
		local FlatIdent_7B75 = 0 + 0;
		while true do
			if (FlatIdent_7B75 == (0 + 0)) then
				print(_(obf_cached_str[846], type(v), obf_cached_str[847] .. k));
				if (k == obf_cached_str[848]) then
					for k, v in pairs(P) do
						print(_(obf_cached_str[849], type(v), obf_cached_str[850] .. k));
					end
				end
				break;
			end
		end
	end
end
return objc;

